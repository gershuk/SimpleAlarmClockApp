{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Notifications from 'expo-notifications';\nimport AppDefines from \"../defines/AppDefines\";\n\nvar Alarm = function () {\n  function Alarm() {\n    _classCallCheck(this, Alarm);\n  }\n\n  _createClass(Alarm, [{\n    key: \"getDate\",\n    value: function getDate() {\n      result = new Date();\n      result.setHours(this.hours);\n      result.setMinutes(this.minutes);\n      result.setSeconds(0);\n\n      if (result < new Date()) {\n        result = new Date(result.getTime() + 86400000);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      return _regeneratorRuntime.async(function activate$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this.IsActive = true;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Notifications.scheduleNotificationAsync({\n                content: {\n                  title: AppDefines.text.titleNotification,\n                  data: {\n                    radioUri: this.radioUri,\n                    radioName: this.radioName\n                  }\n                },\n                trigger: {\n                  hour: this.hours,\n                  minute: this.minutes,\n                  repeats: true\n                }\n              }));\n\n            case 3:\n              this.notifyId = _context.sent;\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"deactivate\",\n    value: function deactivate() {\n      return _regeneratorRuntime.async(function deactivate$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              this.IsActive = false;\n              _context2.prev = 1;\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(Notifications.cancelScheduledNotificationAsync(this.notifyId));\n\n            case 4:\n              _context2.next = 9;\n              break;\n\n            case 6:\n              _context2.prev = 6;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log(\"[Alarm] Could not cancel notification with \" + _context2.t0);\n\n            case 9:\n              this.notifyId = '';\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, [[1, 6]], Promise);\n    }\n  }], [{\n    key: \"fromDate\",\n    value: function fromDate(_ref) {\n      var date = _ref.date,\n          radio = _ref.radio;\n      var alarm = new Alarm();\n      alarm.hours = date.getHours();\n      alarm.minutes = date.getMinutes();\n      alarm.radioName = radio.title;\n      alarm.radioUri = radio.uri;\n      alarm.notifyId = '';\n      alarm.IsActive = false;\n      return alarm;\n    }\n  }, {\n    key: \"fromJson\",\n    value: function fromJson(_ref2) {\n      var jsonObject = _ref2.jsonObject;\n      alarm = new Alarm();\n      alarm.hours = jsonObject.hours;\n      alarm.minutes = jsonObject.minutes;\n      alarm.radioName = jsonObject.radioName;\n      alarm.radioUri = jsonObject.radioUri;\n      alarm.notifyId = jsonObject.notifyId;\n      alarm.IsActive = jsonObject.IsActive;\n      return alarm;\n    }\n  }]);\n\n  return Alarm;\n}();\n\nexport default Alarm;","map":{"version":3,"sources":["C:/Users/vladi/source/repos/SimpleAlarmClockApp/Lib/Alarm.js"],"names":["Notifications","AppDefines","Alarm","result","Date","setHours","hours","setMinutes","minutes","setSeconds","getTime","IsActive","scheduleNotificationAsync","content","title","text","titleNotification","data","radioUri","radioName","trigger","hour","minute","repeats","notifyId","cancelScheduledNotificationAsync","console","log","date","radio","alarm","getHours","getMinutes","uri","jsonObject"],"mappings":"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","sourcesContent":["import * as Notifications from 'expo-notifications';\n\nimport AppDefines from '../defines/AppDefines';\n\nclass Alarm {\n\n    static fromDate({ date, radio }) {\n        const alarm = new Alarm();\n        alarm.hours = date.getHours();\n        alarm.minutes = date.getMinutes();\n        alarm.radioName = radio.title;\n        alarm.radioUri = radio.uri;\n        alarm.notifyId = '';\n        alarm.IsActive = false;\n\n        return alarm;\n    }\n\n    static fromJson({ jsonObject }) {\n        alarm = new Alarm();\n        alarm.hours = jsonObject.hours;\n        alarm.minutes = jsonObject.minutes;\n        alarm.radioName = jsonObject.radioName;\n        alarm.radioUri = jsonObject.radioUri;\n        alarm.notifyId = jsonObject.notifyId;\n        alarm.IsActive = jsonObject.IsActive;\n\n        return alarm;\n    }\n\n    getDate() {\n        result = new Date();\n        result.setHours(this.hours);\n        result.setMinutes(this.minutes);\n        result.setSeconds(0);\n\n        if (result < new Date()) {\n            result = new Date(result.getTime() + 86400000);\n        }\n\n        return result;\n    }\n\n    async activate() {\n        this.IsActive = true;\n        this.notifyId = await Notifications.scheduleNotificationAsync({\n            content: {\n                title: AppDefines.text.titleNotification,\n                data: {\n                    radioUri: this.radioUri,\n                    radioName: this.radioName,\n                },\n            },\n            trigger: {\n                hour: this.hours,\n                minute: this.minutes,\n                repeats: true,\n            },\n        });\n    }\n\n    async deactivate() {\n        this.IsActive = false;\n        try {\n            await Notifications.cancelScheduledNotificationAsync(this.notifyId);\n        } catch (e) {\n            console.log(\"[Alarm] Could not cancel notification with \" + e)\n        }\n        this.notifyId = '';\n    }\n}\n\nexport default Alarm;\n"]},"metadata":{},"sourceType":"module"}