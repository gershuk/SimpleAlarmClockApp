{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport { Button, IconButton, overlay, useTheme } from 'react-native-paper';\nimport TimePicker from \"./TimePicker\";\nimport { clockTypes, inputTypeIcons, inputTypes, reverseInputTypes } from \"./timeUtils\";\nvar supportedOrientations = ['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right'];\nexport function TimePickerModal(_ref) {\n  var visible = _ref.visible,\n      onDismiss = _ref.onDismiss,\n      onConfirm = _ref.onConfirm,\n      hours = _ref.hours,\n      minutes = _ref.minutes,\n      _ref$label = _ref.label,\n      label = _ref$label === void 0 ? 'Select time' : _ref$label,\n      _ref$uppercase = _ref.uppercase,\n      uppercase = _ref$uppercase === void 0 ? true : _ref$uppercase,\n      _ref$cancelLabel = _ref.cancelLabel,\n      cancelLabel = _ref$cancelLabel === void 0 ? 'Cancel' : _ref$cancelLabel,\n      _ref$confirmLabel = _ref.confirmLabel,\n      confirmLabel = _ref$confirmLabel === void 0 ? 'Ok' : _ref$confirmLabel,\n      _ref$animationType = _ref.animationType,\n      animationType = _ref$animationType === void 0 ? 'none' : _ref$animationType,\n      locale = _ref.locale;\n  var theme = useTheme();\n\n  var _React$useState = React.useState(inputTypes.picker),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      inputType = _React$useState2[0],\n      setInputType = _React$useState2[1];\n\n  var _React$useState3 = React.useState(clockTypes.hours),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      focused = _React$useState4[0],\n      setFocused = _React$useState4[1];\n\n  var _React$useState5 = React.useState(getHours(hours)),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      localHours = _React$useState6[0],\n      setLocalHours = _React$useState6[1];\n\n  var _React$useState7 = React.useState(getMinutes(minutes)),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      localMinutes = _React$useState8[0],\n      setLocalMinutes = _React$useState8[1];\n\n  React.useEffect(function () {\n    setLocalHours(getHours(hours));\n  }, [setLocalHours, hours]);\n  React.useEffect(function () {\n    setLocalMinutes(getMinutes(minutes));\n  }, [setLocalMinutes, minutes]);\n  var onFocusInput = React.useCallback(function (type) {\n    return setFocused(type);\n  }, []);\n  var onChange = React.useCallback(function (params) {\n    if (params.focused) {\n      setFocused(params.focused);\n    }\n\n    setLocalHours(params.hours);\n    setLocalMinutes(params.minutes);\n  }, [setFocused, setLocalHours, setLocalMinutes]);\n  return React.createElement(Modal, {\n    animationType: animationType,\n    transparent: true,\n    visible: visible,\n    onRequestClose: onDismiss,\n    presentationStyle: \"overFullScreen\",\n    supportedOrientations: supportedOrientations,\n    statusBarTranslucent: true\n  }, React.createElement(React.Fragment, null, React.createElement(TouchableWithoutFeedback, {\n    onPress: onDismiss\n  }, React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.modalBackground, {\n      backgroundColor: theme.colors.backdrop\n    }]\n  })), React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.modalRoot],\n    pointerEvents: \"box-none\"\n  }, React.createElement(KeyboardAvoidingView, {\n    style: styles.keyboardView,\n    behavior: 'padding'\n  }, React.createElement(Animated.View, {\n    style: [styles.modalContent, {\n      backgroundColor: theme.dark ? overlay(10, theme.colors.surface) : theme.colors.surface,\n      borderRadius: theme.roundness\n    }]\n  }, React.createElement(View, {\n    style: styles.labelContainer\n  }, React.createElement(Text, {\n    style: [styles.label, {\n      color: theme.colors.text\n    }]\n  }, uppercase ? label.toUpperCase() : label)), React.createElement(View, {\n    style: styles.timePickerContainer\n  }, React.createElement(TimePicker, {\n    locale: locale,\n    inputType: inputType,\n    focused: focused,\n    hours: localHours,\n    minutes: localMinutes,\n    onChange: onChange,\n    onFocusInput: onFocusInput\n  })), React.createElement(View, {\n    style: styles.bottom\n  }, React.createElement(IconButton, {\n    icon: inputTypeIcons[reverseInputTypes[inputType]],\n    onPress: function onPress() {\n      return setInputType(reverseInputTypes[inputType]);\n    },\n    size: 24,\n    style: styles.inputTypeToggle,\n    accessibilityLabel: \"toggle keyboard\"\n  }), React.createElement(View, {\n    style: styles.fill\n  }), React.createElement(Button, {\n    onPress: onDismiss,\n    uppercase: uppercase\n  }, cancelLabel), React.createElement(Button, {\n    onPress: function onPress() {\n      return onConfirm({\n        hours: localHours,\n        minutes: localMinutes\n      });\n    },\n    uppercase: uppercase\n  }, confirmLabel)))))));\n}\n\nfunction getMinutes(minutes) {\n  return minutes === undefined || minutes === null ? new Date().getMinutes() : minutes;\n}\n\nfunction getHours(hours) {\n  return hours === undefined || hours === null ? new Date().getHours() : hours;\n}\n\nvar styles = StyleSheet.create({\n  modalRoot: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1\n  },\n  keyboardView: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1\n  },\n  modalBackground: {\n    flex: 1\n  },\n  modalContent: {\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 5\n    },\n    shadowOpacity: 0.34,\n    shadowRadius: 6.27,\n    elevation: 10,\n    minWidth: 287\n  },\n  labelContainer: {\n    height: 28,\n    justifyContent: 'flex-end',\n    paddingLeft: 24,\n    paddingRight: 24\n  },\n  label: {\n    letterSpacing: 1,\n    fontSize: 13\n  },\n  timePickerContainer: {\n    padding: 24\n  },\n  bottom: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  inputTypeToggle: {\n    margin: 4\n  },\n  fill: {\n    flex: 1\n  }\n});\nexport default React.memo(TimePickerModal);","map":{"version":3,"sources":["TimePickerModal.tsx"],"names":["supportedOrientations","label","uppercase","cancelLabel","confirmLabel","animationType","locale","theme","useTheme","React","inputTypes","clockTypes","getHours","getMinutes","setLocalHours","setLocalMinutes","onFocusInput","type","setFocused","onChange","params","onDismiss","StyleSheet","styles","backgroundColor","backdrop","overlay","borderRadius","roundness","labelContainer","color","text","timePickerContainer","bottom","inputTypeIcons","reverseInputTypes","setInputType","fill","onConfirm","hours","minutes","localMinutes","modalRoot","justifyContent","alignItems","flex","keyboardView","modalBackground","modalContent","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","minWidth","paddingLeft","paddingRight","letterSpacing","fontSize","padding","flexDirection","inputTypeToggle","margin"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport {\n  Modal,\n  StyleSheet,\n  View,\n  Text,\n  Animated,\n  TouchableWithoutFeedback,\n  KeyboardAvoidingView,\n} from 'react-native'\n\nimport { Button, IconButton, overlay, useTheme } from 'react-native-paper'\nimport TimePicker from './TimePicker'\nimport {\n  clockTypes,\n  inputTypeIcons,\n  inputTypes,\n  PossibleClockTypes,\n  PossibleInputTypes,\n  reverseInputTypes,\n} from './timeUtils'\n\nconst supportedOrientations: any[] = [\n  'portrait',\n  'portrait-upside-down',\n  'landscape',\n  'landscape-left',\n  'landscape-right',\n]\n\nexport function TimePickerModal({\n  visible,\n  onDismiss,\n  onConfirm,\n  hours,\n  minutes,\n  label = 'Select time',\n  uppercase = true,\n  cancelLabel = 'Cancel',\n  confirmLabel = 'Ok',\n  animationType = 'none',\n  locale,\n}: {\n  locale?: undefined | string\n  label?: string\n  uppercase?: boolean\n  cancelLabel?: string\n  confirmLabel?: string\n  hours?: number | undefined\n  minutes?: number | undefined\n  visible: boolean | undefined\n  onDismiss: () => any\n  onConfirm: (hoursAndMinutes: { hours: number; minutes: number }) => any\n  animationType?: 'slide' | 'fade' | 'none'\n}) {\n  const theme = useTheme()\n\n  const [inputType, setInputType] = React.useState<PossibleInputTypes>(\n    inputTypes.picker\n  )\n  const [focused, setFocused] = React.useState<PossibleClockTypes>(\n    clockTypes.hours\n  )\n  const [localHours, setLocalHours] = React.useState<number>(getHours(hours))\n  const [localMinutes, setLocalMinutes] = React.useState<number>(\n    getMinutes(minutes)\n  )\n\n  React.useEffect(() => {\n    setLocalHours(getHours(hours))\n  }, [setLocalHours, hours])\n\n  React.useEffect(() => {\n    setLocalMinutes(getMinutes(minutes))\n  }, [setLocalMinutes, minutes])\n\n  const onFocusInput = React.useCallback(\n    (type: PossibleClockTypes) => setFocused(type),\n    []\n  )\n  const onChange = React.useCallback(\n    (params: {\n      focused?: PossibleClockTypes | undefined\n      hours: number\n      minutes: number\n    }) => {\n      if (params.focused) {\n        setFocused(params.focused)\n      }\n\n      setLocalHours(params.hours)\n      setLocalMinutes(params.minutes)\n    },\n    [setFocused, setLocalHours, setLocalMinutes]\n  )\n  return (\n    <Modal\n      animationType={animationType}\n      transparent={true}\n      visible={visible}\n      onRequestClose={onDismiss}\n      presentationStyle=\"overFullScreen\"\n      supportedOrientations={supportedOrientations}\n      //@ts-ignore\n      statusBarTranslucent={true}\n    >\n      <>\n        <TouchableWithoutFeedback onPress={onDismiss}>\n          <View\n            style={[\n              StyleSheet.absoluteFill,\n              styles.modalBackground,\n              { backgroundColor: theme.colors.backdrop },\n            ]}\n          />\n        </TouchableWithoutFeedback>\n\n        <View\n          style={[StyleSheet.absoluteFill, styles.modalRoot]}\n          pointerEvents=\"box-none\"\n        >\n          <KeyboardAvoidingView\n            style={styles.keyboardView}\n            behavior={'padding'}\n          >\n            <Animated.View\n              style={[\n                styles.modalContent,\n                {\n                  backgroundColor: theme.dark\n                    ? overlay(10, theme.colors.surface)\n                    : theme.colors.surface,\n                  borderRadius: theme.roundness,\n                },\n              ]}\n            >\n              <View style={styles.labelContainer}>\n                <Text style={[styles.label, { color: theme.colors.text }]}>\n                  {uppercase ? label.toUpperCase() : label}\n                </Text>\n              </View>\n              <View style={styles.timePickerContainer}>\n                <TimePicker\n                  locale={locale}\n                  inputType={inputType}\n                  focused={focused}\n                  hours={localHours}\n                  minutes={localMinutes}\n                  onChange={onChange}\n                  onFocusInput={onFocusInput}\n                />\n              </View>\n              <View style={styles.bottom}>\n                <IconButton\n                  icon={inputTypeIcons[reverseInputTypes[inputType]]}\n                  onPress={() => setInputType(reverseInputTypes[inputType])}\n                  size={24}\n                  style={styles.inputTypeToggle}\n                  accessibilityLabel=\"toggle keyboard\"\n                />\n                <View style={styles.fill} />\n                <Button onPress={onDismiss} uppercase={uppercase}>\n                  {cancelLabel}\n                </Button>\n                <Button\n                  onPress={() =>\n                    onConfirm({ hours: localHours, minutes: localMinutes })\n                  }\n                  uppercase={uppercase}\n                >\n                  {confirmLabel}\n                </Button>\n              </View>\n            </Animated.View>\n          </KeyboardAvoidingView>\n        </View>\n      </>\n    </Modal>\n  )\n}\n\nfunction getMinutes(minutes: number | undefined | null): number {\n  return minutes === undefined || minutes === null\n    ? new Date().getMinutes()\n    : minutes\n}\nfunction getHours(hours: number | undefined | null): number {\n  return hours === undefined || hours === null ? new Date().getHours() : hours\n}\n\nconst styles = StyleSheet.create({\n  modalRoot: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1,\n  },\n  keyboardView: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1,\n  },\n  modalBackground: {\n    flex: 1,\n  },\n  modalContent: {\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 5,\n    },\n    shadowOpacity: 0.34,\n    shadowRadius: 6.27,\n    elevation: 10,\n    minWidth: 287,\n  },\n  labelContainer: {\n    height: 28,\n    justifyContent: 'flex-end',\n    paddingLeft: 24,\n    paddingRight: 24,\n  },\n  label: {\n    letterSpacing: 1,\n    fontSize: 13,\n  },\n  timePickerContainer: { padding: 24 },\n  bottom: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  inputTypeToggle: { margin: 4 },\n  fill: { flex: 1 },\n})\n\nexport default React.memo(TimePickerModal)\n"]},"metadata":{},"sourceType":"module"}