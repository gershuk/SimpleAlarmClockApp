{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Notifications from 'expo-notifications';\nimport AppDefines from \"../../defines/AppDefines\";\n\nvar Alarm = function () {\n  function Alarm(hours, minutes, radioInfo) {\n    var notifyId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n    var isActive = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    _classCallCheck(this, Alarm);\n\n    this.Hours = hours;\n    this.Minutes = minutes;\n    this.RadioInfo = radioInfo;\n    this.NotifyId = notifyId;\n    this.IsActive = isActive;\n  }\n\n  _createClass(Alarm, [{\n    key: \"CalcNotificationDateTime\",\n    value: function CalcNotificationDateTime() {\n      result = new Date();\n      result.setHours(this.Hours);\n      result.setMinutes(this.Minutes);\n      result.setSeconds(0);\n      if (result < new Date()) result = new Date(result.getTime() + 86400000);\n      return result;\n    }\n  }, {\n    key: \"ScheduleAlarm\",\n    value: function ScheduleAlarm() {\n      return _regeneratorRuntime.async(function ScheduleAlarm$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this.IsActive = true;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Notifications.scheduleNotificationAsync({\n                content: {\n                  title: AppDefines.text.titleNotification,\n                  data: {\n                    radioUri: this.radioUri,\n                    radioName: this.radioName\n                  }\n                },\n                trigger: {\n                  hour: this.Hours,\n                  minute: this.Minutes,\n                  repeats: true\n                }\n              }));\n\n            case 3:\n              this.NotifyId = _context.sent;\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"deactivate\",\n    value: function deactivate() {\n      return _regeneratorRuntime.async(function deactivate$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              this.IsActive = false;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(Notifications.cancelScheduledNotificationAsync(this.NotifyId));\n\n            case 3:\n              this.NotifyId = '';\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return this.IsActive;\n    }\n  }], [{\n    key: \"fromDate\",\n    value: function fromDate(_ref) {\n      var date = _ref.date,\n          radioInfo = _ref.radioInfo;\n      return new Alarm(date.getHours(), date.getMinutes(), radioInfo);\n    }\n  }, {\n    key: \"fromJson\",\n    value: function fromJson(_ref2) {\n      var jsonObject = _ref2.jsonObject;\n      return new Alarm(jsonObject.Hours, jsonObject.Minutes, jsonObject.RadioInfo, jsonObject.NotifyId, jsonObject.IsActive);\n    }\n  }]);\n\n  return Alarm;\n}();\n\nexport default Alarm;","map":{"version":3,"sources":["C:/Users/vladi/source/repos/SimpleAlarmClockApp/lib/models/Alarm.js"],"names":["Notifications","AppDefines","Alarm","hours","minutes","radioInfo","notifyId","isActive","Hours","Minutes","RadioInfo","NotifyId","IsActive","result","Date","setHours","setMinutes","setSeconds","getTime","scheduleNotificationAsync","content","title","text","titleNotification","data","radioUri","radioName","trigger","hour","minute","repeats","cancelScheduledNotificationAsync","date","getHours","getMinutes","jsonObject"],"mappings":";;;AAAA,OAAO,KAAKA,aAAZ,MAA+B,oBAA/B;AAEA,OAAOC,UAAP;;IAEMC,K;AAEF,iBAAYC,KAAZ,EAAmBC,OAAnB,EAA4BC,SAA5B,EAAwE;AAAA,QAAjCC,QAAiC,uEAAtB,EAAsB;AAAA,QAAlBC,QAAkB,uEAAP,KAAO;;AAAA;;AACpE,SAAKC,KAAL,GAAaL,KAAb;AACA,SAAKM,OAAL,GAAeL,OAAf;AACA,SAAKM,SAAL,GAAiBL,SAAjB;AACA,SAAKM,QAAL,GAAgBL,QAAhB;AACA,SAAKM,QAAL,GAAgBL,QAAhB;AACH;;;;WAUD,oCAA2B;AACvBM,MAAAA,MAAM,GAAG,IAAIC,IAAJ,EAAT;AACAD,MAAAA,MAAM,CAACE,QAAP,CAAgB,KAAKP,KAArB;AACAK,MAAAA,MAAM,CAACG,UAAP,CAAkB,KAAKP,OAAvB;AACAI,MAAAA,MAAM,CAACI,UAAP,CAAkB,CAAlB;AAEA,UAAIJ,MAAM,GAAG,IAAIC,IAAJ,EAAb,EACID,MAAM,GAAG,IAAIC,IAAJ,CAASD,MAAM,CAACK,OAAP,KAAmB,QAA5B,CAAT;AACJ,aAAOL,MAAP;AACH;;;WAED;AAAA;AAAA;AAAA;AAAA;AACI,mBAAKD,QAAL,GAAgB,IAAhB;AADJ;AAAA,+CAE0BZ,aAAa,CAACmB,yBAAd,CAAwC;AAC1DC,gBAAAA,OAAO,EAAE;AACLC,kBAAAA,KAAK,EAAEpB,UAAU,CAACqB,IAAX,CAAgBC,iBADlB;AAELC,kBAAAA,IAAI,EAAE;AACFC,oBAAAA,QAAQ,EAAE,KAAKA,QADb;AAEFC,oBAAAA,SAAS,EAAE,KAAKA;AAFd;AAFD,iBADiD;AAQ1DC,gBAAAA,OAAO,EAAE;AACLC,kBAAAA,IAAI,EAAE,KAAKpB,KADN;AAELqB,kBAAAA,MAAM,EAAE,KAAKpB,OAFR;AAGLqB,kBAAAA,OAAO,EAAE;AAHJ;AARiD,eAAxC,CAF1B;;AAAA;AAEI,mBAAKnB,QAFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAkBA;AAAA;AAAA;AAAA;AAAA;AACI,mBAAKC,QAAL,GAAgB,KAAhB;AADJ;AAAA,+CAEUZ,aAAa,CAAC+B,gCAAd,CAA+C,KAAKpB,QAApD,CAFV;;AAAA;AAGI,mBAAKA,QAAL,GAAgB,EAAhB;;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAMA,oBAAW;AAAE,aAAO,KAAKC,QAAZ;AAAuB;;;WA3CpC,wBAAqC;AAAA,UAAnBoB,IAAmB,QAAnBA,IAAmB;AAAA,UAAb3B,SAAa,QAAbA,SAAa;AACjC,aAAO,IAAIH,KAAJ,CAAU8B,IAAI,CAACC,QAAL,EAAV,EAA2BD,IAAI,CAACE,UAAL,EAA3B,EAA8C7B,SAA9C,CAAP;AACH;;;WAED,yBAAgC;AAAA,UAAd8B,UAAc,SAAdA,UAAc;AAC5B,aAAO,IAAIjC,KAAJ,CAAUiC,UAAU,CAAC3B,KAArB,EAA4B2B,UAAU,CAAC1B,OAAvC,EAAgD0B,UAAU,CAACzB,SAA3D,EAAsEyB,UAAU,CAACxB,QAAjF,EAA2FwB,UAAU,CAACvB,QAAtG,CAAP;AACH;;;;;;AAwCL,eAAeV,KAAf","sourcesContent":["import * as Notifications from 'expo-notifications';\r\n\r\nimport AppDefines from '../../defines/AppDefines';\r\n\r\nclass Alarm {\r\n\r\n    constructor(hours, minutes, radioInfo, notifyId = '', isActive = false) {\r\n        this.Hours = hours;\r\n        this.Minutes = minutes;\r\n        this.RadioInfo = radioInfo;\r\n        this.NotifyId = notifyId;\r\n        this.IsActive = isActive;\r\n    }\r\n\r\n    static fromDate({ date, radioInfo }) {\r\n        return new Alarm(date.getHours(), date.getMinutes(), radioInfo);\r\n    }\r\n\r\n    static fromJson({ jsonObject }) {\r\n        return new Alarm(jsonObject.Hours, jsonObject.Minutes, jsonObject.RadioInfo, jsonObject.NotifyId, jsonObject.IsActive);\r\n    }\r\n\r\n    CalcNotificationDateTime() {\r\n        result = new Date();\r\n        result.setHours(this.Hours);\r\n        result.setMinutes(this.Minutes);\r\n        result.setSeconds(0);\r\n        // Add one day\r\n        if (result < new Date())\r\n            result = new Date(result.getTime() + 86400000);\r\n        return result;\r\n    }\r\n\r\n    async ScheduleAlarm() {\r\n        this.IsActive = true;\r\n        this.NotifyId = await Notifications.scheduleNotificationAsync({\r\n            content: {\r\n                title: AppDefines.text.titleNotification,\r\n                data: {\r\n                    radioUri: this.radioUri,\r\n                    radioName: this.radioName,\r\n                },\r\n            },\r\n            trigger: {\r\n                hour: this.Hours,\r\n                minute: this.Minutes,\r\n                repeats: true,\r\n            },\r\n        });\r\n    }\r\n\r\n    async deactivate() {\r\n        this.IsActive = false;\r\n        await Notifications.cancelScheduledNotificationAsync(this.NotifyId);\r\n        this.NotifyId = '';\r\n    }\r\n\r\n    isActive() { return this.IsActive; }\r\n}\r\n\r\nexport default Alarm;\r\n"]},"metadata":{},"sourceType":"module"}