{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Notifications from 'expo-notifications';\nimport AppDefines from \"../defines/AppDefines\";\n\nvar Alarm = function () {\n  function Alarm(date, radio) {\n    _classCallCheck(this, Alarm);\n\n    this.date = date;\n    this.radio = radio;\n  }\n\n  _createClass(Alarm, [{\n    key: \"GetDate\",\n    value: function GetDate() {\n      var result = new Date();\n      result.setHours(this.hours);\n      result.setMinutes(this.minutes);\n      result.setSeconds(0);\n\n      if (result < new Date()) {\n        result = new Date(result.getTime() + 86400000);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      return _regeneratorRuntime.async(function activate$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this.IsActive = true;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Notifications.scheduleNotificationAsync({\n                content: {\n                  title: AppDefines.text.titleNotification,\n                  data: {\n                    radioUri: this.radioUri,\n                    radioName: this.radioName\n                  }\n                },\n                trigger: {\n                  hour: this.hours,\n                  minute: this.minutes,\n                  repeats: true\n                }\n              }));\n\n            case 3:\n              this.notifyId = _context.sent;\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"deactivate\",\n    value: function deactivate() {\n      return _regeneratorRuntime.async(function deactivate$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              this.IsActive = false;\n              _context2.prev = 1;\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(Notifications.cancelScheduledNotificationAsync(this.notifyId));\n\n            case 4:\n              _context2.next = 9;\n              break;\n\n            case 6:\n              _context2.prev = 6;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log(\"[Alarm] Could not cancel notification with \" + _context2.t0);\n\n            case 9:\n              this.notifyId = '';\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, [[1, 6]], Promise);\n    }\n  }], [{\n    key: \"ConstructFromDateAndRadio\",\n    value: function ConstructFromDateAndRadio(_ref) {\n      var date = _ref.date,\n          radio = _ref.radio;\n      return new Alarm(date.getHours(), date.getMinutes(), radio.title, radio.uri);\n    }\n  }, {\n    key: \"ConstructFromJson\",\n    value: function ConstructFromJson(_ref2) {\n      var jsonObject = _ref2.jsonObject;\n      var alarm = new Alarm(jsonObject.hours, jsonObject.minutes, jsonObject.radioName, jsonObject.radioUri);\n      alarm.notifyId = jsonObject.notifyId;\n      alarm.IsActive = jsonObject.IsActive;\n      return alarm;\n    }\n  }]);\n\n  return Alarm;\n}();\n\nexport default Alarm;","map":{"version":3,"sources":["C:/Users/vladi/source/repos/SimpleAlarmClockApp/Lib/Alarm.js"],"names":["Notifications","AppDefines","Alarm","date","radio","result","Date","setHours","hours","setMinutes","minutes","setSeconds","getTime","IsActive","scheduleNotificationAsync","content","title","text","titleNotification","data","radioUri","radioName","trigger","hour","minute","repeats","notifyId","cancelScheduledNotificationAsync","console","log","getHours","getMinutes","uri","jsonObject","alarm"],"mappings":";;;AAAA,OAAO,KAAKA,aAAZ,MAA+B,oBAA/B;AAEA,OAAOC,UAAP;;IAEMC,K;AACF,iBAAYC,IAAZ,EAAkBC,KAAlB,EACA;AAAA;;AACI,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaA,KAAb;AACH;;;;WAaD,mBAAU;AACN,UAAIC,MAAM,GAAG,IAAIC,IAAJ,EAAb;AACAD,MAAAA,MAAM,CAACE,QAAP,CAAgB,KAAKC,KAArB;AACAH,MAAAA,MAAM,CAACI,UAAP,CAAkB,KAAKC,OAAvB;AACAL,MAAAA,MAAM,CAACM,UAAP,CAAkB,CAAlB;;AAEA,UAAIN,MAAM,GAAG,IAAIC,IAAJ,EAAb,EAAyB;AACrBD,QAAAA,MAAM,GAAG,IAAIC,IAAJ,CAASD,MAAM,CAACO,OAAP,KAAmB,QAA5B,CAAT;AACH;;AAED,aAAOP,MAAP;AACH;;;WAED;AAAA;AAAA;AAAA;AAAA;AACI,mBAAKQ,QAAL,GAAgB,IAAhB;AADJ;AAAA,+CAE0Bb,aAAa,CAACc,yBAAd,CAAwC;AAC1DC,gBAAAA,OAAO,EAAE;AACLC,kBAAAA,KAAK,EAAEf,UAAU,CAACgB,IAAX,CAAgBC,iBADlB;AAELC,kBAAAA,IAAI,EAAE;AACFC,oBAAAA,QAAQ,EAAE,KAAKA,QADb;AAEFC,oBAAAA,SAAS,EAAE,KAAKA;AAFd;AAFD,iBADiD;AAQ1DC,gBAAAA,OAAO,EAAE;AACLC,kBAAAA,IAAI,EAAE,KAAKf,KADN;AAELgB,kBAAAA,MAAM,EAAE,KAAKd,OAFR;AAGLe,kBAAAA,OAAO,EAAE;AAHJ;AARiD,eAAxC,CAF1B;;AAAA;AAEI,mBAAKC,QAFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAkBA;AAAA;AAAA;AAAA;AAAA;AACI,mBAAKb,QAAL,GAAgB,KAAhB;AADJ;AAAA;AAAA,+CAGcb,aAAa,CAAC2B,gCAAd,CAA+C,KAAKD,QAApD,CAHd;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKQE,cAAAA,OAAO,CAACC,GAAR,CAAY,4DAAZ;;AALR;AAOI,mBAAKH,QAAL,GAAgB,EAAhB;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WA1CA,yCAAkD;AAAA,UAAfvB,IAAe,QAAfA,IAAe;AAAA,UAATC,KAAS,QAATA,KAAS;AAC9C,aAAO,IAAIF,KAAJ,CAAUC,IAAI,CAAC2B,QAAL,EAAV,EAA2B3B,IAAI,CAAC4B,UAAL,EAA3B,EAA8C3B,KAAK,CAACY,KAApD,EAA2DZ,KAAK,CAAC4B,GAAjE,CAAP;AACH;;;WAED,kCAAyC;AAAA,UAAdC,UAAc,SAAdA,UAAc;AACrC,UAAMC,KAAK,GAAG,IAAIhC,KAAJ,CAAU+B,UAAU,CAACzB,KAArB,EAA4ByB,UAAU,CAACvB,OAAvC,EAAgDuB,UAAU,CAACZ,SAA3D,EAAsEY,UAAU,CAACb,QAAjF,CAAd;AACAc,MAAAA,KAAK,CAACR,QAAN,GAAiBO,UAAU,CAACP,QAA5B;AACAQ,MAAAA,KAAK,CAACrB,QAAN,GAAiBoB,UAAU,CAACpB,QAA5B;AACA,aAAOqB,KAAP;AACH;;;;;;AA4CL,eAAehC,KAAf","sourcesContent":["import * as Notifications from 'expo-notifications';\r\n\r\nimport AppDefines from '../defines/AppDefines';\r\n\r\nclass Alarm {\r\n    constructor(date, radio)\r\n    {\r\n        this.date = date;\r\n        this.radio = radio;\r\n    }\r\n\r\n    static ConstructFromDateAndRadio({ date, radio }) {\r\n        return new Alarm(date.getHours(), date.getMinutes(), radio.title, radio.uri);\r\n    }\r\n\r\n    static ConstructFromJson({ jsonObject }) {\r\n        const alarm = new Alarm(jsonObject.hours, jsonObject.minutes, jsonObject.radioName, jsonObject.radioUri);\r\n        alarm.notifyId = jsonObject.notifyId;\r\n        alarm.IsActive = jsonObject.IsActive;\r\n        return alarm;\r\n    }\r\n\r\n    GetDate() {\r\n        let result = new Date();\r\n        result.setHours(this.hours);\r\n        result.setMinutes(this.minutes);\r\n        result.setSeconds(0);\r\n\r\n        if (result < new Date()) {\r\n            result = new Date(result.getTime() + 86400000);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    async activate() {\r\n        this.IsActive = true;\r\n        this.notifyId = await Notifications.scheduleNotificationAsync({\r\n            content: {\r\n                title: AppDefines.text.titleNotification,\r\n                data: {\r\n                    radioUri: this.radioUri,\r\n                    radioName: this.radioName,\r\n                },\r\n            },\r\n            trigger: {\r\n                hour: this.hours,\r\n                minute: this.minutes,\r\n                repeats: true,\r\n            },\r\n        });\r\n    }\r\n\r\n    async deactivate() {\r\n        this.IsActive = false;\r\n        try {\r\n            await Notifications.cancelScheduledNotificationAsync(this.notifyId);\r\n        } catch (e) {\r\n            console.log(\"[Alarm] Could not cancel notification with \" + e)\r\n        }\r\n        this.notifyId = '';\r\n    }\r\n}\r\n\r\nexport default Alarm;\r\n"]},"metadata":{},"sourceType":"module"}