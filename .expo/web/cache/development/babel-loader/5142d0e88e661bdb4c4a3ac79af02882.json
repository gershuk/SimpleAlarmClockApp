{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Text, TouchableRipple, useTheme } from 'react-native-paper';\nimport { useMemo } from 'react';\nimport Color from 'color';\nimport { useSwitchColors } from \"./timeUtils\";\nimport { DisplayModeContext } from \"./TimePicker\";\nexport default function AmPmSwitcher(_ref) {\n  var onChange = _ref.onChange,\n      hours = _ref.hours;\n\n  var _React$useContext = React.useContext(DisplayModeContext),\n      setMode = _React$useContext.setMode,\n      mode = _React$useContext.mode;\n\n  var theme = useTheme();\n  var backgroundColor = useMemo(function () {\n    if (theme.dark) {\n      return Color(theme.colors.surface).lighten(1.2).hex();\n    }\n\n    return Color(theme.colors.surface).darken(0.1).hex();\n  }, [theme]);\n  var isAM = mode === 'AM';\n  return React.createElement(View, {\n    style: [styles.root, {\n      borderColor: backgroundColor,\n      borderRadius: theme.roundness\n    }]\n  }, React.createElement(SwitchButton, {\n    label: \"AM\",\n    onPress: function onPress() {\n      setMode('AM');\n\n      if (hours - 12 >= 0) {\n        onChange(hours - 12);\n      }\n    },\n    selected: isAM,\n    disabled: isAM\n  }), React.createElement(View, {\n    style: [styles.switchSeparator, {\n      backgroundColor: backgroundColor\n    }]\n  }), React.createElement(SwitchButton, {\n    label: \"PM\",\n    onPress: function onPress() {\n      setMode('PM');\n\n      if (hours + 12 <= 24) {\n        onChange(hours + 12);\n      }\n    },\n    selected: !isAM,\n    disabled: !isAM\n  }));\n}\n\nfunction SwitchButton(_ref2) {\n  var label = _ref2.label,\n      onPress = _ref2.onPress,\n      selected = _ref2.selected,\n      disabled = _ref2.disabled;\n  var theme = useTheme();\n\n  var _useSwitchColors = useSwitchColors(selected),\n      backgroundColor = _useSwitchColors.backgroundColor,\n      color = _useSwitchColors.color;\n\n  return React.createElement(TouchableRipple, {\n    onPress: onPress,\n    style: styles.switchButton,\n    accessibilityLabel: label,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled: disabled\n    },\n    disabled: disabled\n  }, React.createElement(View, {\n    style: [styles.switchButtonInner, {\n      backgroundColor: backgroundColor\n    }]\n  }, React.createElement(Text, {\n    selectable: false,\n    style: [_objectSpread(_objectSpread({}, theme.fonts.medium), {}, {\n      color: color\n    })]\n  }, label)));\n}\n\nvar styles = StyleSheet.create({\n  root: {\n    width: 50,\n    height: 80,\n    borderWidth: 1,\n    overflow: 'hidden'\n  },\n  switchSeparator: {\n    height: 1,\n    width: 48\n  },\n  switchButton: {\n    flex: 1\n  },\n  switchButtonInner: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["AmPmSwitcher.tsx"],"names":["hours","mode","React","theme","useTheme","backgroundColor","useMemo","Color","isAM","styles","borderColor","borderRadius","roundness","setMode","onChange","disabled","color","useSwitchColors","root","width","height","borderWidth","overflow","switchSeparator","switchButton","flex","switchButtonInner","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport { Text, TouchableRipple, useTheme } from 'react-native-paper'\nimport { useMemo } from 'react'\nimport Color from 'color'\nimport { useSwitchColors } from './timeUtils'\nimport { DisplayModeContext } from './TimePicker'\n\nexport default function AmPmSwitcher({\n  onChange,\n  hours,\n}: {\n  hours: number\n  onChange: (newHours: number) => any\n}) {\n  const { setMode, mode } = React.useContext(DisplayModeContext)\n  const theme = useTheme()\n  const backgroundColor = useMemo<string>(() => {\n    if (theme.dark) {\n      return Color(theme.colors.surface).lighten(1.2).hex()\n    }\n    return Color(theme.colors.surface).darken(0.1).hex()\n  }, [theme])\n\n  const isAM = mode === 'AM'\n  return (\n    <View\n      style={[\n        styles.root,\n        {\n          borderColor: backgroundColor,\n          borderRadius: theme.roundness,\n        },\n      ]}\n    >\n      <SwitchButton\n        label=\"AM\"\n        onPress={() => {\n          setMode('AM')\n          if (hours - 12 >= 0) {\n            onChange(hours - 12)\n          }\n        }}\n        selected={isAM}\n        disabled={isAM}\n      />\n      <View style={[styles.switchSeparator, { backgroundColor }]} />\n      <SwitchButton\n        label=\"PM\"\n        onPress={() => {\n          setMode('PM')\n          if (hours + 12 <= 24) {\n            onChange(hours + 12)\n          }\n        }}\n        selected={!isAM}\n        disabled={!isAM}\n      />\n    </View>\n  )\n}\n\nfunction SwitchButton({\n  label,\n  onPress,\n  selected,\n  disabled,\n}: {\n  label: string\n  onPress: (() => any) | undefined\n  selected: boolean\n  disabled: boolean\n}) {\n  const theme = useTheme()\n  const { backgroundColor, color } = useSwitchColors(selected)\n\n  return (\n    <TouchableRipple\n      onPress={onPress}\n      style={styles.switchButton}\n      accessibilityLabel={label}\n      // @ts-ignore old React Native versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      // @ts-ignore old React Native versions\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"button\"\n      accessibilityState={{ disabled }}\n      disabled={disabled}\n    >\n      <View style={[styles.switchButtonInner, { backgroundColor }]}>\n        <Text\n          selectable={false}\n          style={[\n            {\n              ...theme.fonts.medium,\n              color: color,\n            },\n          ]}\n        >\n          {label}\n        </Text>\n      </View>\n    </TouchableRipple>\n  )\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    width: 50,\n    height: 80,\n    borderWidth: 1,\n    overflow: 'hidden',\n  },\n  switchSeparator: {\n    height: 1,\n    width: 48,\n  },\n  switchButton: {\n    flex: 1,\n  },\n  switchButtonInner: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n})\n"]},"metadata":{},"sourceType":"module"}