{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as FS from 'expo-file-system';\nimport Alarm from \"../Lib/Alarm\";\nvar fileName = \"alarms.json\";\n\nvar AlarmContainer = function () {\n  function AlarmContainer() {\n    _classCallCheck(this, AlarmContainer);\n\n    this.alarmsList = [];\n  }\n\n  _createClass(AlarmContainer, [{\n    key: \"Add\",\n    value: function Add(_ref) {\n      var alarm = _ref.alarm;\n      var id = this.alarmsList.length;\n      this.alarmsList.push(alarm);\n      this.SaveToJson();\n      return id;\n    }\n  }, {\n    key: \"Remove\",\n    value: function Remove(_ref2) {\n      var id = _ref2.id;\n      var alarm = this.GetByAdd({\n        id: id\n      });\n\n      if (alarm.isActive()) {\n        alarm.deactivate();\n      }\n\n      this.alarmsList.splice(id, 1);\n      this.SaveToJson();\n    }\n  }, {\n    key: \"GetAll\",\n    value: function GetAll() {\n      return this.alarmsList;\n    }\n  }, {\n    key: \"Count\",\n    value: function Count() {\n      return this.alarmsList.length;\n    }\n  }, {\n    key: \"GetByAdd\",\n    value: function GetByAdd(_ref3) {\n      var id = _ref3.id;\n      return this.alarmsList[id];\n    }\n  }, {\n    key: \"SaveToJson\",\n    value: function SaveToJson() {\n      var jsonData, saveFilePath;\n      return _regeneratorRuntime.async(function SaveToJson$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              jsonData = JSON.stringify(this.alarmsList);\n              saveFilePath = FS.documentDirectory + '/' + this.fileName;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(FS.writeAsStringAsync(saveFilePath, jsonData));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"Load\",\n    value: function Load(_ref4) {\n      var _this = this;\n\n      var onLoadedCb, saveFilePath;\n      return _regeneratorRuntime.async(function Load$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              onLoadedCb = _ref4.onLoadedCb;\n              saveFilePath = FS.documentDirectory + '/' + this.fileName;\n              this.alarmsList = [];\n              FS.readAsStringAsync(saveFilePath).then(function (jsonData) {\n                alarmJsonArray = JSON.parse(jsonData);\n                alarmJsonArray.map(function (alarmJson) {\n                  _this.alarmsList.push(Alarm.ConstructFromJson({\n                    jsonObject: alarmJson\n                  }));\n                });\n                onLoadedCb(true);\n              }).catch(function (err) {\n                _this.alarmsList = [];\n                onLoadedCb(false);\n              });\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return AlarmContainer;\n}();\n\nAlarmContainer.Instance = AlarmContainer.Instance || new AlarmContainer();\nexport default AlarmContainer;","map":{"version":3,"sources":["C:/Users/vladi/source/repos/SimpleAlarmClockApp/Lib/AlarmManager.js"],"names":["FS","Alarm","fileName","AlarmContainer","alarmsList","alarm","id","length","push","SaveToJson","GetByAdd","isActive","deactivate","splice","jsonData","JSON","stringify","saveFilePath","documentDirectory","writeAsStringAsync","onLoadedCb","readAsStringAsync","then","alarmJsonArray","parse","map","alarmJson","ConstructFromJson","jsonObject","catch","err","Instance"],"mappings":";;;AAAA,OAAO,KAAKA,EAAZ,MAAoB,kBAApB;AAEA,OAAOC,KAAP;AAEA,IAAMC,QAAQ,GAAG,aAAjB;;IAEMC,c;;;;SAwDFC,U,GAAa,E;;;;;WArDb,mBAAe;AAAA,UAATC,KAAS,QAATA,KAAS;AACX,UAAMC,EAAE,GAAG,KAAKF,UAAL,CAAgBG,MAA3B;AACA,WAAKH,UAAL,CAAgBI,IAAhB,CAAqBH,KAArB;AACA,WAAKI,UAAL;AACA,aAAOH,EAAP;AACH;;;WAED,uBAAe;AAAA,UAANA,EAAM,SAANA,EAAM;AACX,UAAMD,KAAK,GAAG,KAAKK,QAAL,CAAc;AAAEJ,QAAAA,EAAE,EAAEA;AAAN,OAAd,CAAd;;AACA,UAAID,KAAK,CAACM,QAAN,EAAJ,EAAsB;AAClBN,QAAAA,KAAK,CAACO,UAAN;AACH;;AACD,WAAKR,UAAL,CAAgBS,MAAhB,CAAuBP,EAAvB,EAA2B,CAA3B;AACA,WAAKG,UAAL;AACH;;;WAED,kBAAS;AACL,aAAO,KAAKL,UAAZ;AACH;;;WAED,iBAAQ;AACJ,aAAO,KAAKA,UAAL,CAAgBG,MAAvB;AACH;;;WAED,yBAAiB;AAAA,UAAND,EAAM,SAANA,EAAM;AACb,aAAO,KAAKF,UAAL,CAAgBE,EAAhB,CAAP;AACH;;;WAED;AAAA;AAAA;AAAA;AAAA;AAAA;AACUQ,cAAAA,QADV,GACqBC,IAAI,CAACC,SAAL,CAAe,KAAKZ,UAApB,CADrB;AAEUa,cAAAA,YAFV,GAEyBjB,EAAE,CAACkB,iBAAH,GAAuB,GAAvB,GAA6B,KAAKhB,QAF3D;AAAA;AAAA,+CAIUF,EAAE,CAACmB,kBAAH,CAAsBF,YAAtB,EAAoCH,QAApC,CAJV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAOA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAaM,cAAAA,UAAb,SAAaA,UAAb;AACUH,cAAAA,YADV,GACyBjB,EAAE,CAACkB,iBAAH,GAAuB,GAAvB,GAA6B,KAAKhB,QAD3D;AAEI,mBAAKE,UAAL,GAAkB,EAAlB;AAEAJ,cAAAA,EAAE,CAACqB,iBAAH,CAAqBJ,YAArB,EACKK,IADL,CACU,UAACR,QAAD,EAAc;AAChBS,gBAAAA,cAAc,GAAGR,IAAI,CAACS,KAAL,CAAWV,QAAX,CAAjB;AACAS,gBAAAA,cAAc,CAACE,GAAf,CAAmB,UAACC,SAAD,EAAe;AAC9B,kBAAA,KAAI,CAACtB,UAAL,CAAgBI,IAAhB,CAAqBP,KAAK,CAAC0B,iBAAN,CAAwB;AAAEC,oBAAAA,UAAU,EAAEF;AAAd,mBAAxB,CAArB;AACH,iBAFD;AAGAN,gBAAAA,UAAU,CAAC,IAAD,CAAV;AACH,eAPL,EAQKS,KARL,CAQW,UAACC,GAAD,EAAS;AACZ,gBAAA,KAAI,CAAC1B,UAAL,GAAkB,EAAlB;AACAgB,gBAAAA,UAAU,CAAC,KAAD,CAAV;AACH,eAXL;;AAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAtCEjB,c,CACK4B,Q,GAAW5B,cAAc,CAAC4B,QAAf,IAA2B,IAAI5B,cAAJ,E;AA0DjD,eAAeA,cAAf","sourcesContent":["import * as FS from 'expo-file-system';\n\nimport Alarm from '../Lib/Alarm';\n\nconst fileName = \"alarms.json\";\n\nclass AlarmContainer {\n    static Instance = AlarmContainer.Instance || new AlarmContainer();\n\n    Add({ alarm }) {\n        const id = this.alarmsList.length;\n        this.alarmsList.push(alarm);\n        this.SaveToJson();\n        return id;\n    }\n\n    Remove({ id }) {\n        const alarm = this.GetByAdd({ id: id });\n        if (alarm.isActive()) {\n            alarm.deactivate();\n        }\n        this.alarmsList.splice(id, 1);\n        this.SaveToJson();\n    }\n\n    GetAll() {\n        return this.alarmsList;\n    }\n\n    Count() {\n        return this.alarmsList.length;\n    }\n\n    GetByAdd({ id }) {\n        return this.alarmsList[id];\n    }\n\n    async SaveToJson() {\n        const jsonData = JSON.stringify(this.alarmsList);\n        const saveFilePath = FS.documentDirectory + '/' + this.fileName;\n\n        await FS.writeAsStringAsync(saveFilePath, jsonData);\n    }\n\n    async Load({ onLoadedCb }) {\n        const saveFilePath = FS.documentDirectory + '/' + this.fileName;\n        this.alarmsList = [];\n\n        FS.readAsStringAsync(saveFilePath)\n            .then((jsonData) => {\n                alarmJsonArray = JSON.parse(jsonData);\n                alarmJsonArray.map((alarmJson) => {\n                    this.alarmsList.push(Alarm.ConstructFromJson({ jsonObject: alarmJson }));\n                });\n                onLoadedCb(true);\n            })\n            .catch((err) => {\n                this.alarmsList = [];\n                onLoadedCb(false);\n            });\n    }\n\n    alarmsList = [];\n}\n\nexport default AlarmContainer;\n"]},"metadata":{},"sourceType":"module"}