{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"value\", \"clockType\", \"pressed\", \"onPress\", \"onChanged\", \"inputType\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useTheme, TouchableRipple } from 'react-native-paper';\nimport Color from 'color';\nimport { inputTypes, useInputColors } from \"./timeUtils\";\n\nfunction TimeInput(_ref, ref) {\n  var value = _ref.value,\n      clockType = _ref.clockType,\n      pressed = _ref.pressed,\n      _onPress = _ref.onPress,\n      onChanged = _ref.onChanged,\n      inputType = _ref.inputType,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useState = React.useState(\"\" + value),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      controlledValue = _React$useState2[0],\n      setControlledValue = _React$useState2[1];\n\n  var onInnerChange = function onInnerChange(text) {\n    setControlledValue(text);\n\n    if (text !== '' && text !== '0') {\n      onChanged(Number(text));\n    }\n  };\n\n  React.useEffect(function () {\n    setControlledValue(\"\" + value);\n  }, [value]);\n  var theme = useTheme();\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      inputFocused = _React$useState4[0],\n      setInputFocused = _React$useState4[1];\n\n  var highlighted = inputType === inputTypes.picker ? pressed : inputFocused;\n\n  var _useInputColors = useInputColors(highlighted),\n      color = _useInputColors.color,\n      backgroundColor = _useInputColors.backgroundColor;\n\n  var formattedValue = controlledValue;\n\n  if (!inputFocused) {\n    formattedValue = controlledValue.length === 1 ? \"0\" + controlledValue : \"\" + controlledValue;\n  }\n\n  return React.createElement(View, {\n    style: styles.root\n  }, React.createElement(TextInput, _extends({\n    ref: ref,\n    style: [styles.input, {\n      color: color,\n      backgroundColor: backgroundColor,\n      borderRadius: theme.roundness\n    }],\n    value: formattedValue,\n    maxLength: 2,\n    onFocus: function onFocus() {\n      return setInputFocused(true);\n    },\n    onBlur: function onBlur() {\n      return setInputFocused(false);\n    },\n    keyboardAppearance: theme.dark ? 'dark' : 'default',\n    keyboardType: \"number-pad\",\n    onChangeText: onInnerChange\n  }, rest)), _onPress && inputType === inputTypes.picker ? React.createElement(TouchableRipple, {\n    style: [StyleSheet.absoluteFill, styles.buttonOverlay, {\n      borderRadius: theme.roundness\n    }],\n    rippleColor: Color(theme.colors.primary).fade(0.7).hex(),\n    onPress: function onPress() {\n      return _onPress(clockType);\n    },\n    borderless: true\n  }, React.createElement(View, null)) : null);\n}\n\nvar styles = StyleSheet.create({\n  root: {\n    position: 'relative',\n    height: 80,\n    width: 96\n  },\n  input: {\n    fontSize: 50,\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    width: 96,\n    height: 80\n  },\n  buttonOverlay: {\n    overflow: 'hidden'\n  }\n});\nexport default React.forwardRef(TimeInput);","map":{"version":3,"sources":["TimeInput.tsx"],"names":["rest","React","onInnerChange","text","setControlledValue","onChanged","Number","theme","useTheme","highlighted","inputType","inputTypes","backgroundColor","useInputColors","formattedValue","controlledValue","styles","root","color","borderRadius","roundness","setInputFocused","onPress","StyleSheet","Color","position","height","width","input","fontSize","textAlign","textAlignVertical","buttonOverlay","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { View, TextInput, TextInputProps, StyleSheet } from 'react-native'\nimport { useTheme, TouchableRipple } from 'react-native-paper'\n\nimport Color from 'color'\nimport {\n  inputTypes,\n  PossibleClockTypes,\n  PossibleInputTypes,\n  useInputColors,\n} from './timeUtils'\n\ninterface TimeInputProps\n  extends Omit<Omit<TextInputProps, 'value'>, 'onFocus'> {\n  value: number\n  clockType: PossibleClockTypes\n  onPress?: (type: PossibleClockTypes) => any\n  pressed: boolean\n  onChanged: (n: number) => any\n  inputType: PossibleInputTypes\n}\n\nfunction TimeInput(\n  {\n    value,\n    clockType,\n    pressed,\n    onPress,\n    onChanged,\n    inputType,\n    ...rest\n  }: TimeInputProps,\n  ref: any\n) {\n  const [controlledValue, setControlledValue] = React.useState<string>(\n    `${value}`\n  )\n\n  const onInnerChange = (text: string) => {\n    setControlledValue(text)\n    if (text !== '' && text !== '0') {\n      onChanged(Number(text))\n    }\n  }\n\n  React.useEffect(() => {\n    setControlledValue(`${value}`)\n  }, [value])\n\n  const theme = useTheme()\n  const [inputFocused, setInputFocused] = React.useState<boolean>(false)\n\n  const highlighted = inputType === inputTypes.picker ? pressed : inputFocused\n\n  const { color, backgroundColor } = useInputColors(highlighted)\n\n  let formattedValue = controlledValue\n  if (!inputFocused) {\n    formattedValue =\n      controlledValue.length === 1\n        ? `0${controlledValue}`\n        : `${controlledValue}`\n  }\n\n  return (\n    <View style={styles.root}>\n      <TextInput\n        ref={ref}\n        style={[\n          styles.input,\n          {\n            color,\n            backgroundColor,\n            borderRadius: theme.roundness,\n          },\n        ]}\n        value={formattedValue}\n        maxLength={2}\n        onFocus={() => setInputFocused(true)}\n        onBlur={() => setInputFocused(false)}\n        keyboardAppearance={theme.dark ? 'dark' : 'default'}\n        keyboardType=\"number-pad\"\n        onChangeText={onInnerChange}\n        {...rest}\n      />\n      {onPress && inputType === inputTypes.picker ? (\n        <TouchableRipple\n          style={[\n            StyleSheet.absoluteFill,\n            styles.buttonOverlay,\n            {\n              // backgroundColor: 'blue',\n              borderRadius: theme.roundness,\n            },\n          ]}\n          rippleColor={Color(theme.colors.primary).fade(0.7).hex()}\n          onPress={() => onPress(clockType)}\n          borderless={true}\n        >\n          <View />\n        </TouchableRipple>\n      ) : null}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  root: { position: 'relative', height: 80, width: 96 },\n  input: {\n    fontSize: 50,\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    width: 96,\n    height: 80,\n  },\n  buttonOverlay: { overflow: 'hidden' },\n})\n\nexport default React.forwardRef(TimeInput)\n"]},"metadata":{},"sourceType":"module"}