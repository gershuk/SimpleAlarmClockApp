{"ast":null,"code":"import * as React from 'react';\nimport { useLatest } from \"../utils\";\nexport function showWeekDay(dayIndex, disableWeekDays) {\n  return !(disableWeekDays && disableWeekDays.some(function (di) {\n    return di === dayIndex;\n  }));\n}\nexport function dateToUnix(d) {\n  return Math.round(d.getTime() / 1000);\n}\nexport function addMonths(date, count) {\n  var n = date.getDate();\n  var n2 = new Date(date.getTime());\n  n2.setDate(1);\n  n2.setMonth(n2.getMonth() + count);\n  n2.setDate(Math.min(n, getDaysInMonth({\n    year: n2.getFullYear(),\n    month: n2.getMonth()\n  })));\n  return n2;\n}\nexport function getDaysInMonth(_ref) {\n  var year = _ref.year,\n      month = _ref.month;\n  return [31, isLeapYear({\n    year: year\n  }) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];\n}\nexport function getFirstDayOfMonth(_ref2) {\n  var year = _ref2.year,\n      month = _ref2.month;\n  return new Date(year, month, 1).getDay();\n}\nexport function useRangeChecker(validRange) {\n  var validStart = validRange === null || validRange === void 0 ? void 0 : validRange.startDate;\n  var validEnd = validRange === null || validRange === void 0 ? void 0 : validRange.endDate;\n  var startUnix = validStart instanceof Date ? dateToUnix(getStartOfDay(validStart)) : undefined;\n  var endUnix = validEnd instanceof Date ? dateToUnix(getEndOfDay(validEnd)) : undefined;\n  var validDisabledDatesRef = useLatest(validRange === null || validRange === void 0 ? void 0 : validRange.disabledDates);\n  var isWithinValidRange = React.useCallback(function (day) {\n    return isDateWithinOptionalRange(day, {\n      startUnix: startUnix,\n      endUnix: endUnix\n    });\n  }, [startUnix, endUnix]);\n  var isDisabled = React.useCallback(function (day) {\n    return validDisabledDatesRef.current ? validDisabledDatesRef.current.some(function (disabledDate) {\n      return areDatesOnSameDay(disabledDate, day);\n    }) : false;\n  }, [validDisabledDatesRef]);\n  return {\n    isDisabled: isDisabled,\n    isWithinValidRange: isWithinValidRange,\n    validStart: validStart,\n    validEnd: validEnd\n  };\n}\nexport function areDatesOnSameDay(a, b) {\n  if (!b) {\n    return false;\n  }\n\n  return a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth() && a.getDate() === b.getDate();\n}\nexport function isDateBetween(date, _ref3) {\n  var startDate = _ref3.startDate,\n      endDate = _ref3.endDate;\n\n  if (!startDate || !endDate) {\n    return false;\n  }\n\n  return date <= endDate && date >= startDate;\n}\nexport function isDateWithinOptionalRange(date, _ref4) {\n  var startUnix = _ref4.startUnix,\n      endUnix = _ref4.endUnix;\n  var dateUnix = dateToUnix(date);\n\n  if (startUnix && dateUnix < startUnix) {\n    return false;\n  }\n\n  if (endUnix && dateUnix > endUnix) {\n    return false;\n  }\n\n  return true;\n}\nexport function isLeapYear(_ref5) {\n  var year = _ref5.year;\n  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\nexport var daySize = 46;\nexport var estimatedMonthHeight = 360;\nexport var startAtIndex = 1200;\nexport var totalMonths = startAtIndex * 2;\nexport var beginOffset = estimatedMonthHeight * startAtIndex;\nexport var gridCounts = new Array(totalMonths);\nexport function getGridCount(index) {\n  var cHeight = gridCounts[index];\n\n  if (cHeight) {\n    return cHeight;\n  }\n\n  var monthDate = addMonths(new Date(), getRealIndex(index));\n  var h = getGridCountForDate(monthDate);\n  gridCounts[index] = h;\n  return h;\n}\nexport function getGridCountForDate(date) {\n  var year = date.getFullYear();\n  var month = date.getMonth();\n  var daysInMonth = getDaysInMonth({\n    year: year,\n    month: month\n  });\n  var dayOfWeek = getFirstDayOfMonth({\n    year: year,\n    month: month\n  });\n  return Math.ceil((daysInMonth + dayOfWeek) / 7);\n}\nexport function getRealIndex(index) {\n  return index - startAtIndex;\n}\nexport function getInitialIndex(date) {\n  if (!date) {\n    return startAtIndex;\n  }\n\n  var today = new Date();\n  var months = differenceInMonths(today, date);\n  return startAtIndex + months;\n}\nexport function useInputFormatter(_ref6) {\n  var locale = _ref6.locale;\n  return React.useMemo(function () {\n    return new Intl.DateTimeFormat(locale, {\n      month: '2-digit',\n      day: '2-digit',\n      year: 'numeric'\n    });\n  }, [locale]);\n}\nexport function getStartOfDay(d) {\n  return new Date(d.getFullYear(), d.getMonth(), d.getDate(), 0, 0, 0);\n}\nexport function getEndOfDay(d) {\n  return new Date(d.getFullYear(), d.getMonth(), d.getDate(), 23, 59, 59);\n}\nexport function useInputFormat(_ref7) {\n  var formatter = _ref7.formatter,\n      locale = _ref7.locale;\n  return React.useMemo(function () {\n    var inputDate = formatter.format(new Date(2020, 10 - 1, 1));\n    return inputDate.replace('2020', locale === 'pt' ? 'AAAA' : 'YYYY').replace('10', 'MM').replace('01', 'DD');\n  }, [formatter, locale]);\n}\nexport function differenceInMonths(firstDate, secondDate) {\n  var diffMonths = (secondDate.getFullYear() - firstDate.getFullYear()) * 12;\n  diffMonths -= firstDate.getMonth();\n  diffMonths += secondDate.getMonth();\n  return diffMonths;\n}","map":{"version":3,"sources":["dateUtils.tsx"],"names":["disableWeekDays","di","Math","d","n","date","n2","getDaysInMonth","year","month","validStart","validRange","validEnd","startUnix","dateToUnix","getStartOfDay","endUnix","getEndOfDay","validDisabledDatesRef","useLatest","isWithinValidRange","day","isDateWithinOptionalRange","isDisabled","disabledDate","areDatesOnSameDay","a","b","endDate","dateUnix","daySize","estimatedMonthHeight","startAtIndex","totalMonths","beginOffset","gridCounts","cHeight","monthDate","addMonths","getRealIndex","h","getGridCountForDate","daysInMonth","dayOfWeek","getFirstDayOfMonth","index","today","months","differenceInMonths","locale","Intl","inputDate","formatter","diffMonths","secondDate","firstDate"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { useLatest } from '../utils'\nimport type { ValidRangeType } from './Calendar'\n\nexport type DisableWeekDaysType = number[]\n\nexport function showWeekDay(\n  dayIndex: number,\n  disableWeekDays?: DisableWeekDaysType\n): boolean {\n  return !(disableWeekDays && disableWeekDays.some((di) => di === dayIndex))\n}\n\nexport function dateToUnix(d: Date): number {\n  return Math.round(d.getTime() / 1000)\n}\n\nexport function addMonths(date: Date, count: number) {\n  let n = date.getDate()\n  let n2 = new Date(date.getTime())\n  n2.setDate(1)\n  n2.setMonth(n2.getMonth() + count)\n  n2.setDate(\n    Math.min(\n      n,\n      getDaysInMonth({ year: n2.getFullYear(), month: n2.getMonth() })\n    )\n  )\n\n  return n2\n}\n\n// https://stackoverflow.com/a/1185068/2508481\n// pass in any date as parameter anyDateInMonth based on dayjs\nexport function getDaysInMonth({\n  year,\n  month,\n}: {\n  year: number\n  month: number\n}): number {\n  return [\n    31,\n    isLeapYear({ year }) ? 29 : 28,\n    31,\n    30,\n    31,\n    30,\n    31,\n    31,\n    30,\n    31,\n    30,\n    31,\n  ][month]\n}\n\nexport function getFirstDayOfMonth({\n  year,\n  month,\n}: {\n  year: number\n  month: number\n}): number {\n  return new Date(year, month, 1).getDay()\n}\n\nexport function useRangeChecker(validRange: ValidRangeType | undefined) {\n  const validStart = validRange?.startDate\n  const validEnd = validRange?.endDate\n  const startUnix =\n    validStart instanceof Date\n      ? dateToUnix(getStartOfDay(validStart))\n      : undefined\n\n  const endUnix =\n    validEnd instanceof Date ? dateToUnix(getEndOfDay(validEnd)) : undefined\n\n  const validDisabledDatesRef = useLatest(validRange?.disabledDates)\n\n  const isWithinValidRange = React.useCallback(\n    (day: Date) => {\n      return isDateWithinOptionalRange(day, {\n        startUnix: startUnix,\n        endUnix: endUnix,\n      })\n    },\n    [startUnix, endUnix]\n  )\n\n  const isDisabled = React.useCallback(\n    (day: Date) => {\n      return validDisabledDatesRef.current\n        ? validDisabledDatesRef.current.some((disabledDate) =>\n            areDatesOnSameDay(disabledDate, day)\n          )\n        : false\n    },\n    [validDisabledDatesRef]\n  )\n\n  return { isDisabled, isWithinValidRange, validStart, validEnd }\n}\n\nexport function areDatesOnSameDay(a: Date, b?: Date | null | undefined) {\n  if (!b) {\n    return false\n  }\n\n  return (\n    a.getFullYear() === b.getFullYear() &&\n    a.getMonth() === b.getMonth() &&\n    a.getDate() === b.getDate()\n  )\n}\n\nexport function isDateBetween(\n  date: Date,\n  {\n    startDate,\n    endDate,\n  }: {\n    startDate?: Date | null | undefined\n    endDate?: Date | null | undefined\n  }\n): boolean {\n  if (!startDate || !endDate) {\n    return false\n  }\n  return date <= endDate && date >= startDate\n}\n\n/**\n * Check if a date is within an optional range.\n *\n * If the range doesn't exist, it defaults to `true`.\n */\nexport function isDateWithinOptionalRange(\n  date: Date,\n  {\n    startUnix,\n    endUnix,\n  }: { startUnix: number | undefined; endUnix: number | undefined }\n) {\n  const dateUnix = dateToUnix(date)\n  // if startUnix is provided and date is before start\n  if (startUnix && dateUnix < startUnix) {\n    return false\n  }\n\n  // if endUnix is provided and date is after end\n  if (endUnix && dateUnix > endUnix) {\n    return false\n  }\n\n  return true\n}\n\nexport function isLeapYear({ year }: { year: number }) {\n  return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0\n}\n\nexport const daySize = 46\nexport const estimatedMonthHeight = 360\nexport const startAtIndex = 1200\nexport const totalMonths = startAtIndex * 2\nexport const beginOffset = estimatedMonthHeight * startAtIndex\nexport const gridCounts = new Array<number | undefined>(totalMonths)\n\nexport function getGridCount(index: number) {\n  const cHeight = gridCounts[index]\n  if (cHeight) {\n    return cHeight\n  }\n  const monthDate = addMonths(new Date(), getRealIndex(index))\n  const h = getGridCountForDate(monthDate)\n  gridCounts[index] = h\n  return h\n}\n\nexport function getGridCountForDate(date: Date) {\n  const year = date.getFullYear()\n  const month = date.getMonth()\n  const daysInMonth = getDaysInMonth({ year, month })\n  const dayOfWeek = getFirstDayOfMonth({ year, month })\n  return Math.ceil((daysInMonth + dayOfWeek) / 7)\n}\n\nexport function getRealIndex(index: number) {\n  return index - startAtIndex\n}\n\nexport function getInitialIndex(date: Date | undefined) {\n  if (!date) {\n    return startAtIndex\n  }\n\n  const today = new Date()\n  const months = differenceInMonths(today, date)\n\n  return startAtIndex + months\n}\n\nexport function useInputFormatter({ locale }: { locale: string | undefined }) {\n  return React.useMemo(() => {\n    return new Intl.DateTimeFormat(locale, {\n      month: '2-digit',\n      day: '2-digit',\n      year: 'numeric',\n    })\n  }, [locale])\n}\nexport function getStartOfDay(d: Date): Date {\n  return new Date(d.getFullYear(), d.getMonth(), d.getDate(), 0, 0, 0)\n}\nexport function getEndOfDay(d: Date): Date {\n  return new Date(d.getFullYear(), d.getMonth(), d.getDate(), 23, 59, 59)\n}\nexport function useInputFormat({\n  formatter,\n  locale,\n}: {\n  formatter: Intl.DateTimeFormat\n  locale: string | undefined\n}) {\n  return React.useMemo(() => {\n    // TODO: something cleaner and more universal?\n    const inputDate = formatter.format(new Date(2020, 10 - 1, 1))\n    return inputDate\n      .replace('2020', locale === 'pt' ? 'AAAA' : 'YYYY')\n      .replace('10', 'MM')\n      .replace('01', 'DD')\n  }, [formatter, locale])\n}\n\nexport function differenceInMonths(firstDate: Date, secondDate: Date) {\n  let diffMonths = (secondDate.getFullYear() - firstDate.getFullYear()) * 12\n  diffMonths -= firstDate.getMonth()\n  diffMonths += secondDate.getMonth()\n  return diffMonths\n}\n"]},"metadata":{},"sourceType":"module"}