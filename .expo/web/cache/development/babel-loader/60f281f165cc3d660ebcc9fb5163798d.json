{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as FS from 'expo-file-system';\nimport Alarm from \"../Lib/Alarm\";\n\nvar AlarmManager = function () {\n  function AlarmManager() {\n    _classCallCheck(this, AlarmManager);\n\n    this.alarmsList = [];\n  }\n\n  _createClass(AlarmManager, [{\n    key: \"addAlarm\",\n    value: function addAlarm(_ref) {\n      var alarm = _ref.alarm;\n      var id = this.alarmsList.length;\n      this.alarmsList.push(alarm);\n      this.save();\n      return id;\n    }\n  }, {\n    key: \"removeAlarm\",\n    value: function removeAlarm(_ref2) {\n      var id = _ref2.id;\n      var alarm = this.getAlarm({\n        id: id\n      });\n\n      if (alarm.isActive()) {\n        alarm.deactivate();\n      }\n\n      this.alarmsList.splice(id, 1);\n      this.save();\n    }\n  }, {\n    key: \"getAlarms\",\n    value: function getAlarms() {\n      return this.alarmsList;\n    }\n  }, {\n    key: \"getAlarmsNum\",\n    value: function getAlarmsNum() {\n      return this.alarmsList.length;\n    }\n  }, {\n    key: \"getAlarm\",\n    value: function getAlarm(_ref3) {\n      var id = _ref3.id;\n      return this.alarmsList[id];\n    }\n  }, {\n    key: \"save\",\n    value: function save() {\n      var jsonData, saveFilePath;\n      return _regeneratorRuntime.async(function save$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              jsonData = JSON.stringify(this.alarmsList);\n              saveFilePath = FS.documentDirectory + '/' + this.saveFileName;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(FS.writeAsStringAsync(saveFilePath, jsonData));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"load\",\n    value: function load(_ref4) {\n      var _this = this;\n\n      var onLoadedCb, saveFilePath;\n      return _regeneratorRuntime.async(function load$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              onLoadedCb = _ref4.onLoadedCb;\n              saveFilePath = FS.documentDirectory + '/' + this.saveFileName;\n              this.alarmsList = [];\n              FS.readAsStringAsync(saveFilePath).then(function (jsonData) {\n                alarmJsonArray = JSON.parse(jsonData);\n                alarmJsonArray.map(function (alarmJson) {\n                  _this.alarmsList.push(Alarm.ConstructFromJson({\n                    jsonObject: alarmJson\n                  }));\n                });\n                onLoadedCb(true);\n              }).catch(function (err) {\n                _this.alarmsList = [];\n                onLoadedCb(false);\n              });\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return AlarmManager;\n}();\n\nAlarmManager.saveFileName = \"alarms.json\";\nAlarmManager.instance = AlarmManager.instance || new AlarmManager();\nexport default AlarmManager;","map":{"version":3,"sources":["C:/Users/vladi/source/repos/SimpleAlarmClockApp/Lib/AlarmManager.js"],"names":["FS","Alarm","AlarmManager","alarmsList","alarm","id","length","push","save","getAlarm","isActive","deactivate","splice","jsonData","JSON","stringify","saveFilePath","documentDirectory","saveFileName","writeAsStringAsync","onLoadedCb","readAsStringAsync","then","alarmJsonArray","parse","map","alarmJson","ConstructFromJson","jsonObject","catch","err","instance"],"mappings":";;;AAAA,OAAO,KAAKA,EAAZ,MAAoB,kBAApB;AAEA,OAAOC,KAAP;;IAEMC,Y;;;;SAuDFC,U,GAAa,E;;;;;WArDb,wBAAoB;AAAA,UAATC,KAAS,QAATA,KAAS;AAChB,UAAMC,EAAE,GAAG,KAAKF,UAAL,CAAgBG,MAA3B;AACA,WAAKH,UAAL,CAAgBI,IAAhB,CAAqBH,KAArB;AACA,WAAKI,IAAL;AACA,aAAOH,EAAP;AACH;;;WAED,4BAAoB;AAAA,UAANA,EAAM,SAANA,EAAM;AAChB,UAAMD,KAAK,GAAG,KAAKK,QAAL,CAAc;AAAEJ,QAAAA,EAAE,EAAEA;AAAN,OAAd,CAAd;;AACA,UAAID,KAAK,CAACM,QAAN,EAAJ,EAAsB;AAClBN,QAAAA,KAAK,CAACO,UAAN;AACH;;AACD,WAAKR,UAAL,CAAgBS,MAAhB,CAAuBP,EAAvB,EAA2B,CAA3B;AACA,WAAKG,IAAL;AACH;;;WAED,qBAAY;AACR,aAAO,KAAKL,UAAZ;AACH;;;WAED,wBAAe;AACX,aAAO,KAAKA,UAAL,CAAgBG,MAAvB;AACH;;;WAED,yBAAiB;AAAA,UAAND,EAAM,SAANA,EAAM;AACb,aAAO,KAAKF,UAAL,CAAgBE,EAAhB,CAAP;AACH;;;WAED;AAAA;AAAA;AAAA;AAAA;AAAA;AACUQ,cAAAA,QADV,GACqBC,IAAI,CAACC,SAAL,CAAe,KAAKZ,UAApB,CADrB;AAEUa,cAAAA,YAFV,GAEyBhB,EAAE,CAACiB,iBAAH,GAAuB,GAAvB,GAA6B,KAAKC,YAF3D;AAAA;AAAA,+CAIUlB,EAAE,CAACmB,kBAAH,CAAsBH,YAAtB,EAAoCH,QAApC,CAJV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAOA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAaO,cAAAA,UAAb,SAAaA,UAAb;AACUJ,cAAAA,YADV,GACyBhB,EAAE,CAACiB,iBAAH,GAAuB,GAAvB,GAA6B,KAAKC,YAD3D;AAEI,mBAAKf,UAAL,GAAkB,EAAlB;AAEAH,cAAAA,EAAE,CAACqB,iBAAH,CAAqBL,YAArB,EACKM,IADL,CACU,UAACT,QAAD,EAAc;AAChBU,gBAAAA,cAAc,GAAGT,IAAI,CAACU,KAAL,CAAWX,QAAX,CAAjB;AACAU,gBAAAA,cAAc,CAACE,GAAf,CAAmB,UAACC,SAAD,EAAe;AAC9B,kBAAA,KAAI,CAACvB,UAAL,CAAgBI,IAAhB,CAAqBN,KAAK,CAAC0B,iBAAN,CAAwB;AAAEC,oBAAAA,UAAU,EAAEF;AAAd,mBAAxB,CAArB;AACH,iBAFD;AAGAN,gBAAAA,UAAU,CAAC,IAAD,CAAV;AACH,eAPL,EAQKS,KARL,CAQW,UAACC,GAAD,EAAS;AACZ,gBAAA,KAAI,CAAC3B,UAAL,GAAkB,EAAlB;AACAiB,gBAAAA,UAAU,CAAC,KAAD,CAAV;AACH,eAXL;;AAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AArCElB,Y,CAyDKgB,Y,GAAe,a;AAzDpBhB,Y,CA0DK6B,Q,GAAW7B,YAAY,CAAC6B,QAAb,IAAyB,IAAI7B,YAAJ,E;AAG/C,eAAeA,YAAf","sourcesContent":["import * as FS from 'expo-file-system';\n\nimport Alarm from '../Lib/Alarm';\n\nclass AlarmManager {\n\n    addAlarm({ alarm }) {\n        const id = this.alarmsList.length;\n        this.alarmsList.push(alarm);\n        this.save();\n        return id;\n    }\n\n    removeAlarm({ id }) {\n        const alarm = this.getAlarm({ id: id });\n        if (alarm.isActive()) {\n            alarm.deactivate();\n        }\n        this.alarmsList.splice(id, 1);\n        this.save();\n    }\n\n    getAlarms() {\n        return this.alarmsList;\n    }\n\n    getAlarmsNum() {\n        return this.alarmsList.length;\n    }\n\n    getAlarm({ id }) {\n        return this.alarmsList[id];\n    }\n\n    async save() {\n        const jsonData = JSON.stringify(this.alarmsList);\n        const saveFilePath = FS.documentDirectory + '/' + this.saveFileName;\n\n        await FS.writeAsStringAsync(saveFilePath, jsonData);\n    }\n\n    async load({ onLoadedCb }) {\n        const saveFilePath = FS.documentDirectory + '/' + this.saveFileName;\n        this.alarmsList = [];\n\n        FS.readAsStringAsync(saveFilePath)\n            .then((jsonData) => {\n                alarmJsonArray = JSON.parse(jsonData);\n                alarmJsonArray.map((alarmJson) => {\n                    this.alarmsList.push(Alarm.ConstructFromJson({ jsonObject: alarmJson }));\n                });\n                onLoadedCb(true);\n            })\n            .catch((err) => {\n                this.alarmsList = [];\n                onLoadedCb(false);\n            });\n    }\n\n    alarmsList = [];\n\n    static saveFileName = \"alarms.json\";\n    static instance = AlarmManager.instance || new AlarmManager();\n}\n\nexport default AlarmManager;\n"]},"metadata":{},"sourceType":"module"}