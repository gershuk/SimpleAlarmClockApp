{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar _templateObject;\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Notifications from 'expo-notifications';\nimport AppDefines from \"../defines/AppDefines\";\n\nvar Alarm = function () {\n  function Alarm(hours, minutes, radioName, radioUri) {\n    _classCallCheck(this, Alarm);\n\n    this.hours = hours;\n    this.minutes = minutes;\n    this.radioName = radioName;\n    this.radioUri = radioUri;\n    this.notifyId = '';\n    this.IsActive = false;\n  }\n\n  _createClass(Alarm, [{\n    key: \"GetDate\",\n    value: function GetDate() {\n      var result = new Date();\n      result.setHours(this.hours);\n      result.setMinutes(this.minutes);\n      result.setSeconds(0);\n      if (result < new Date()) result = new Date(result.getTime() + 86400000);\n      return result;\n    }\n  }, {\n    key: \"Activate\",\n    value: function Activate() {\n      return _regeneratorRuntime.async(function Activate$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Notifications.scheduleNotificationAsync({\n                content: {\n                  title: \"Alarm notification!\",\n                  data: {\n                    radioUri: this.radioUri,\n                    radioName: this.radioName\n                  }\n                },\n                trigger: {\n                  hour: this.hours,\n                  minute: this.minutes,\n                  repeats: true\n                }\n              }));\n\n            case 3:\n              this.notifyId = _context.sent;\n              _context.next = 9;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(\"Could not active alarm. Error: \" + _context.t0);\n\n            case 9:\n              this.IsActive = true;\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[0, 6]], Promise);\n    }\n  }, {\n    key: \"Deactivate\",\n    value: function Deactivate() {\n      return _regeneratorRuntime.async(function Deactivate$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(Notifications.cancelScheduledNotificationAsync(this.notifyId));\n\n            case 3:\n              _context2.next = 8;\n              break;\n\n            case 5:\n              _context2.prev = 5;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log($(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"Could not deactivate alarm. Error: \", \"\"])), _context2.t0));\n\n            case 8:\n              this.IsActive = false;\n              this.notifyId = '';\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, [[0, 5]], Promise);\n    }\n  }], [{\n    key: \"ConstructFromDateAndRadio\",\n    value: function ConstructFromDateAndRadio(_ref) {\n      var date = _ref.date,\n          radio = _ref.radio;\n      return new Alarm(date.getHours(), date.getMinutes(), radio.title, radio.uri);\n    }\n  }, {\n    key: \"ConstructFromJson\",\n    value: function ConstructFromJson(_ref2) {\n      var jsonObject = _ref2.jsonObject;\n      var alarm = new Alarm(jsonObject.hours, jsonObject.minutes, jsonObject.radioName, jsonObject.radioUri);\n      alarm.notifyId = jsonObject.notifyId;\n      alarm.IsActive = jsonObject.IsActive;\n      return alarm;\n    }\n  }]);\n\n  return Alarm;\n}();\n\nexport default Alarm;","map":{"version":3,"sources":["C:/Users/vladi/source/repos/SimpleAlarmClockApp/Lib/Alarm.js"],"names":["Notifications","AppDefines","Alarm","hours","minutes","radioName","radioUri","notifyId","IsActive","result","Date","setHours","setMinutes","setSeconds","getTime","scheduleNotificationAsync","content","title","data","trigger","hour","minute","repeats","console","error","cancelScheduledNotificationAsync","log","$","date","radio","getHours","getMinutes","uri","jsonObject","alarm"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,aAAZ,MAA+B,oBAA/B;AAEA,OAAOC,UAAP;;IAEMC,K;AACF,iBAAYC,KAAZ,EAAmBC,OAAnB,EAA4BC,SAA5B,EAAuCC,QAAvC,EAAiD;AAAA;;AAC7C,SAAKH,KAAL,GAAaA,KAAb;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACH;;;;WAaD,mBAAU;AACN,UAAIC,MAAM,GAAG,IAAIC,IAAJ,EAAb;AACAD,MAAAA,MAAM,CAACE,QAAP,CAAgB,KAAKR,KAArB;AACAM,MAAAA,MAAM,CAACG,UAAP,CAAkB,KAAKR,OAAvB;AACAK,MAAAA,MAAM,CAACI,UAAP,CAAkB,CAAlB;AAGA,UAAIJ,MAAM,GAAG,IAAIC,IAAJ,EAAb,EACID,MAAM,GAAG,IAAIC,IAAJ,CAASD,MAAM,CAACK,OAAP,KAAmB,QAA5B,CAAT;AAEJ,aAAOL,MAAP;AACH;;;WAED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAE8BT,aAAa,CAACe,yBAAd,CAAwC;AAC1DC,gBAAAA,OAAO,EAAE;AACLC,kBAAAA,KAAK,EAAE,qBADF;AAELC,kBAAAA,IAAI,EAAE;AACFZ,oBAAAA,QAAQ,EAAE,KAAKA,QADb;AAEFD,oBAAAA,SAAS,EAAE,KAAKA;AAFd;AAFD,iBADiD;AAQ1Dc,gBAAAA,OAAO,EAAE;AACLC,kBAAAA,IAAI,EAAE,KAAKjB,KADN;AAELkB,kBAAAA,MAAM,EAAE,KAAKjB,OAFR;AAGLkB,kBAAAA,OAAO,EAAE;AAHJ;AARiD,eAAxC,CAF9B;;AAAA;AAEQ,mBAAKf,QAFb;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiBQgB,cAAAA,OAAO,CAACC,KAAR;;AAjBR;AAmBI,mBAAKhB,QAAL,GAAgB,IAAhB;;AAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEcR,aAAa,CAACyB,gCAAd,CAA+C,KAAKlB,QAApD,CAFd;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIQgB,cAAAA,OAAO,CAACG,GAAR,CAAYC,CAAZ;;AAJR;AAMI,mBAAKnB,QAAL,GAAgB,KAAhB;AACA,mBAAKD,QAAL,GAAgB,EAAhB;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WA9CA,yCAAkD;AAAA,UAAfqB,IAAe,QAAfA,IAAe;AAAA,UAATC,KAAS,QAATA,KAAS;AAC9C,aAAO,IAAI3B,KAAJ,CAAU0B,IAAI,CAACE,QAAL,EAAV,EAA2BF,IAAI,CAACG,UAAL,EAA3B,EAA8CF,KAAK,CAACZ,KAApD,EAA2DY,KAAK,CAACG,GAAjE,CAAP;AACH;;;WAED,kCAAyC;AAAA,UAAdC,UAAc,SAAdA,UAAc;AACrC,UAAMC,KAAK,GAAG,IAAIhC,KAAJ,CAAU+B,UAAU,CAAC9B,KAArB,EAA4B8B,UAAU,CAAC7B,OAAvC,EAAgD6B,UAAU,CAAC5B,SAA3D,EAAsE4B,UAAU,CAAC3B,QAAjF,CAAd;AACA4B,MAAAA,KAAK,CAAC3B,QAAN,GAAiB0B,UAAU,CAAC1B,QAA5B;AACA2B,MAAAA,KAAK,CAAC1B,QAAN,GAAiByB,UAAU,CAACzB,QAA5B;AACA,aAAO0B,KAAP;AACH;;;;;;AAgDL,eAAehC,KAAf","sourcesContent":["import * as Notifications from 'expo-notifications';\r\n\r\nimport AppDefines from '../defines/AppDefines';\r\n\r\nclass Alarm {\r\n    constructor(hours, minutes, radioName, radioUri) {\r\n        this.hours = hours;\r\n        this.minutes = minutes;\r\n        this.radioName = radioName;\r\n        this.radioUri = radioUri;\r\n        this.notifyId = '';\r\n        this.IsActive = false;\r\n    }\r\n\r\n    static ConstructFromDateAndRadio({ date, radio }) {\r\n        return new Alarm(date.getHours(), date.getMinutes(), radio.title, radio.uri);\r\n    }\r\n\r\n    static ConstructFromJson({ jsonObject }) {\r\n        const alarm = new Alarm(jsonObject.hours, jsonObject.minutes, jsonObject.radioName, jsonObject.radioUri);\r\n        alarm.notifyId = jsonObject.notifyId;\r\n        alarm.IsActive = jsonObject.IsActive;\r\n        return alarm;\r\n    }\r\n\r\n    GetDate() {\r\n        let result = new Date();\r\n        result.setHours(this.hours);\r\n        result.setMinutes(this.minutes);\r\n        result.setSeconds(0);\r\n\r\n        //add one day\r\n        if (result < new Date())\r\n            result = new Date(result.getTime() + 86400000);\r\n\r\n        return result;\r\n    }\r\n\r\n    async Activate() {\r\n        try {\r\n            this.notifyId = await Notifications.scheduleNotificationAsync({\r\n                content: {\r\n                    title: \"Alarm notification!\",\r\n                    data: {\r\n                        radioUri: this.radioUri,\r\n                        radioName: this.radioName,\r\n                    },\r\n                },\r\n                trigger: {\r\n                    hour: this.hours,\r\n                    minute: this.minutes,\r\n                    repeats: true,\r\n                },\r\n            });\r\n        } catch (e) {\r\n            console.error(`Could not active alarm. Error: ${e}`)\r\n        }\r\n        this.IsActive = true;\r\n    }\r\n\r\n    async Deactivate() {\r\n        try {\r\n            await Notifications.cancelScheduledNotificationAsync(this.notifyId);\r\n        } catch (e) {\r\n            console.log($`Could not deactivate alarm. Error: ${e}`)\r\n        }\r\n        this.IsActive = false;\r\n        this.notifyId = '';\r\n    }\r\n}\r\n\r\nexport default Alarm;\r\n"]},"metadata":{},"sourceType":"module"}