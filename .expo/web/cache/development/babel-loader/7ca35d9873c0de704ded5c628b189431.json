{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"label\", \"value\", \"onChange\", \"style\", \"locale\", \"validRange\", \"inputMode\", \"withModal\", \"withDateFormatInLabel\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport TextInputWithMask from \"../TextInputMask\";\nimport { HelperText, IconButton, useTheme } from 'react-native-paper';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport DatePickerModal from \"./DatePickerModal\";\nimport useDateInput from \"./inputUtils\";\nimport { useLatest } from \"../utils\";\n\nfunction DatePickerInput(_ref, ref) {\n  var label = _ref.label,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      style = _ref.style,\n      locale = _ref.locale,\n      validRange = _ref.validRange,\n      inputMode = _ref.inputMode,\n      _ref$withModal = _ref.withModal,\n      withModal = _ref$withModal === void 0 ? true : _ref$withModal,\n      _ref$withDateFormatIn = _ref.withDateFormatInLabel,\n      withDateFormatInLabel = _ref$withDateFormatIn === void 0 ? true : _ref$withDateFormatIn,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var theme = useTheme();\n\n  var _useDateInput = useDateInput({\n    locale: locale,\n    value: value,\n    validRange: validRange,\n    inputMode: inputMode,\n    onChange: onChange\n  }),\n      formattedValue = _useDateInput.formattedValue,\n      inputFormat = _useDateInput.inputFormat,\n      onChangeText = _useDateInput.onChangeText,\n      error = _useDateInput.error;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      visible = _React$useState2[0],\n      setVisible = _React$useState2[1];\n\n  var onDismiss = React.useCallback(function () {\n    setVisible(false);\n  }, [setVisible]);\n  var onChangeRef = useLatest(onChange);\n  var onInnerConfirm = React.useCallback(function (_ref2) {\n    var date = _ref2.date;\n    setVisible(false);\n    onChangeRef.current(date);\n  }, [setVisible, onChangeRef]);\n  return React.createElement(React.Fragment, null, React.createElement(View, {\n    style: styles.root\n  }, React.createElement(TextInputWithMask, _extends({}, rest, {\n    ref: ref,\n    label: getLabel({\n      label: label,\n      inputFormat: inputFormat,\n      withDateFormatInLabel: withDateFormatInLabel\n    }),\n    value: formattedValue,\n    keyboardType: 'number-pad',\n    placeholder: inputFormat,\n    mask: inputFormat,\n    onChangeText: onChangeText,\n    keyboardAppearance: theme.dark ? 'dark' : 'default',\n    error: !!error,\n    style: [styles.input, style]\n  })), withModal ? React.createElement(IconButton, {\n    size: 24,\n    style: styles.calendarButton,\n    icon: \"calendar\",\n    onPress: function onPress() {\n      return setVisible(true);\n    }\n  }) : null), React.createElement(HelperText, {\n    type: \"error\",\n    visible: !!error\n  }, error), withModal ? React.createElement(DatePickerModal, {\n    date: value,\n    mode: \"single\",\n    visible: visible,\n    onDismiss: onDismiss,\n    onConfirm: onInnerConfirm,\n    locale: locale,\n    dateMode: inputMode,\n    validRange: validRange\n  }) : null);\n}\n\nfunction getLabel(_ref3) {\n  var withDateFormatInLabel = _ref3.withDateFormatInLabel,\n      inputFormat = _ref3.inputFormat,\n      label = _ref3.label;\n\n  if (withDateFormatInLabel) {\n    return label ? label + \" (\" + inputFormat + \")\" : inputFormat;\n  }\n\n  return label || '';\n}\n\nvar styles = StyleSheet.create({\n  root: {\n    minWidth: 150,\n    flexDirection: 'row',\n    position: 'relative',\n    alignItems: 'center',\n    flexGrow: 1\n  },\n  input: {\n    flexGrow: 1\n  },\n  calendarButton: {\n    position: 'absolute',\n    right: 0,\n    zIndex: 10\n  }\n});\nexport default React.forwardRef(DatePickerInput);","map":{"version":3,"sources":["DatePickerInput.tsx"],"names":["withModal","withDateFormatInLabel","rest","theme","useTheme","error","useDateInput","locale","value","validRange","inputMode","onChange","React","onDismiss","setVisible","onChangeRef","useLatest","onInnerConfirm","date","styles","root","getLabel","label","inputFormat","minWidth","flexDirection","position","alignItems","flexGrow","input","calendarButton","right","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react'\n\nimport TextInputWithMask from '../TextInputMask'\nimport { HelperText, IconButton, TextInput, useTheme } from 'react-native-paper'\nimport { View, StyleSheet } from 'react-native'\nimport DatePickerModal from './DatePickerModal'\nimport useDateInput from './inputUtils'\nimport type { ValidRangeType } from './Calendar'\nimport { useLatest } from '../utils'\n\nfunction DatePickerInput(\n  {\n    label,\n    value,\n    onChange,\n    style,\n    locale,\n    validRange,\n    inputMode,\n    withModal = true,\n    withDateFormatInLabel = true,\n    ...rest\n  }: {\n    inputMode: 'start' | 'end'\n    locale: string\n    onChange: (date: Date | undefined) => void\n    value: Date | undefined\n    validRange?: ValidRangeType | undefined\n    withModal?: boolean\n    withDateFormatInLabel?: boolean\n  } & Omit<\n    React.ComponentProps<typeof TextInput>,\n    'value' | 'onChange' | 'onChangeText'\n  >,\n  ref: any\n) {\n  const theme = useTheme()\n  const { formattedValue, inputFormat, onChangeText, error } = useDateInput({\n    locale,\n    value,\n    validRange,\n    inputMode,\n    onChange,\n  })\n\n  const [visible, setVisible] = React.useState<boolean>(false)\n  const onDismiss = React.useCallback(() => {\n    setVisible(false)\n  }, [setVisible])\n  const onChangeRef = useLatest(onChange)\n  const onInnerConfirm = React.useCallback(\n    ({ date }) => {\n      setVisible(false)\n      onChangeRef.current(date)\n    },\n    [setVisible, onChangeRef]\n  )\n\n  return (\n    <>\n      <View style={styles.root}>\n        <TextInputWithMask\n          {...rest}\n          ref={ref}\n          label={getLabel({\n            // TODO: support label components?\n            label: label as any,\n            inputFormat,\n            withDateFormatInLabel,\n          })}\n          value={formattedValue}\n          keyboardType={'number-pad'}\n          placeholder={inputFormat}\n          mask={inputFormat}\n          onChangeText={onChangeText}\n          keyboardAppearance={theme.dark ? 'dark' : 'default'}\n          error={!!error}\n          style={[styles.input, style]}\n        />\n        {withModal ? (\n          <IconButton\n            size={24}\n            style={styles.calendarButton}\n            icon=\"calendar\"\n            onPress={() => setVisible(true)}\n          />\n        ) : null}\n      </View>\n      <HelperText type=\"error\" visible={!!error}>\n        {error}\n      </HelperText>\n\n      {withModal ? (\n        <DatePickerModal\n          date={value}\n          mode=\"single\"\n          visible={visible}\n          onDismiss={onDismiss}\n          onConfirm={onInnerConfirm}\n          locale={locale}\n          dateMode={inputMode}\n          validRange={validRange}\n        />\n      ) : null}\n    </>\n  )\n}\n\nfunction getLabel({\n  withDateFormatInLabel,\n  inputFormat,\n  label,\n}: {\n  withDateFormatInLabel: boolean\n  inputFormat: string\n  label: string | undefined\n}) {\n  if (withDateFormatInLabel) {\n    return label ? `${label} (${inputFormat})` : inputFormat\n  }\n  return label || ''\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    minWidth: 150,\n    flexDirection: 'row',\n    position: 'relative',\n    alignItems: 'center',\n    flexGrow: 1,\n  },\n  input: {\n    flexGrow: 1,\n  },\n  calendarButton: { position: 'absolute', right: 0, zIndex: 10 },\n})\nexport default React.forwardRef(DatePickerInput)\n"]},"metadata":{},"sourceType":"module"}