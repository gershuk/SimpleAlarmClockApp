{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Notifications from 'expo-notifications';\nimport AppDefines from \"../defines/AppDefines\";\n\nvar Alarm = function () {\n  function Alarm(hours, minutes, radioName, radioUri) {\n    _classCallCheck(this, Alarm);\n\n    this.hours = hours;\n    this.minutes = minutes;\n    this.radioName = radioName;\n    this.radioUri = radioUri;\n  }\n\n  _createClass(Alarm, [{\n    key: \"getDate\",\n    value: function getDate() {\n      var result = new Date();\n      result.setHours(this.hours);\n      result.setMinutes(this.minutes);\n      result.setSeconds(0);\n\n      if (result < new Date()) {\n        result = new Date(result.getTime() + 86400000);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      return _regeneratorRuntime.async(function activate$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this.IsActive = true;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Notifications.scheduleNotificationAsync({\n                content: {\n                  title: AppDefines.text.titleNotification,\n                  data: {\n                    radioUri: this.radioUri,\n                    radioName: this.radioName\n                  }\n                },\n                trigger: {\n                  hour: this.hours,\n                  minute: this.minutes,\n                  repeats: true\n                }\n              }));\n\n            case 3:\n              this.notifyId = _context.sent;\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"deactivate\",\n    value: function deactivate() {\n      return _regeneratorRuntime.async(function deactivate$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              this.IsActive = false;\n              _context2.prev = 1;\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(Notifications.cancelScheduledNotificationAsync(this.notifyId));\n\n            case 4:\n              _context2.next = 9;\n              break;\n\n            case 6:\n              _context2.prev = 6;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log(\"[Alarm] Could not cancel notification with \" + _context2.t0);\n\n            case 9:\n              this.notifyId = '';\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, [[1, 6]], Promise);\n    }\n  }], [{\n    key: \"fromDate\",\n    value: function fromDate(_ref) {\n      var date = _ref.date,\n          radio = _ref.radio;\n      var alarm = new Alarm();\n      alarm.hours = date.getHours();\n      alarm.minutes = date.getMinutes();\n      alarm.radioName = radio.title;\n      alarm.radioUri = radio.uri;\n      alarm.notifyId = '';\n      alarm.IsActive = false;\n      return alarm;\n    }\n  }, {\n    key: \"fromJson\",\n    value: function fromJson(_ref2) {\n      var jsonObject = _ref2.jsonObject;\n      var alarm = new Alarm();\n      alarm.hours = jsonObject.hours;\n      alarm.minutes = jsonObject.minutes;\n      alarm.radioName = jsonObject.radioName;\n      alarm.radioUri = jsonObject.radioUri;\n      alarm.notifyId = jsonObject.notifyId;\n      alarm.IsActive = jsonObject.IsActive;\n      return alarm;\n    }\n  }]);\n\n  return Alarm;\n}();\n\nexport default Alarm;","map":{"version":3,"sources":["C:/Users/vladi/source/repos/SimpleAlarmClockApp/Lib/Alarm.js"],"names":["Notifications","AppDefines","Alarm","hours","minutes","radioName","radioUri","result","Date","setHours","setMinutes","setSeconds","getTime","IsActive","scheduleNotificationAsync","content","title","text","titleNotification","data","trigger","hour","minute","repeats","notifyId","cancelScheduledNotificationAsync","console","log","date","radio","alarm","getHours","getMinutes","uri","jsonObject"],"mappings":"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","sourcesContent":["import * as Notifications from 'expo-notifications';\n\nimport AppDefines from '../defines/AppDefines';\n\nclass Alarm {\n    constructor(hours, minutes, radioName, radioUri)\n    {\n        this.hours = hours;\n        this.minutes = minutes;\n        this.radioName = radioName;\n        this.radioUri = radioUri;\n    }\n\n    static fromDate({ date, radio }) {\n        const alarm = new Alarm();\n        alarm.hours = date.getHours();\n        alarm.minutes = date.getMinutes();\n        alarm.radioName = radio.title;\n        alarm.radioUri = radio.uri;\n        alarm.notifyId = '';\n        alarm.IsActive = false;\n\n        return alarm;\n    }\n\n    static fromJson({ jsonObject }) {\n        const alarm = new Alarm();\n        alarm.hours = jsonObject.hours;\n        alarm.minutes = jsonObject.minutes;\n        alarm.radioName = jsonObject.radioName;\n        alarm.radioUri = jsonObject.radioUri;\n        alarm.notifyId = jsonObject.notifyId;\n        alarm.IsActive = jsonObject.IsActive;\n\n        return alarm;\n    }\n\n    getDate() {\n        let result = new Date();\n        result.setHours(this.hours);\n        result.setMinutes(this.minutes);\n        result.setSeconds(0);\n\n        if (result < new Date()) {\n            result = new Date(result.getTime() + 86400000);\n        }\n\n        return result;\n    }\n\n    async activate() {\n        this.IsActive = true;\n        this.notifyId = await Notifications.scheduleNotificationAsync({\n            content: {\n                title: AppDefines.text.titleNotification,\n                data: {\n                    radioUri: this.radioUri,\n                    radioName: this.radioName,\n                },\n            },\n            trigger: {\n                hour: this.hours,\n                minute: this.minutes,\n                repeats: true,\n            },\n        });\n    }\n\n    async deactivate() {\n        this.IsActive = false;\n        try {\n            await Notifications.cancelScheduledNotificationAsync(this.notifyId);\n        } catch (e) {\n            console.log(\"[Alarm] Could not cancel notification with \" + e)\n        }\n        this.notifyId = '';\n    }\n}\n\nexport default Alarm;\n"]},"metadata":{},"sourceType":"module"}