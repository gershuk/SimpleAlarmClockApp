{"ast":null,"code":"import * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { useTheme } from 'react-native-paper';\nimport { clockTypes, toHourInputFormat, toHourOutputFormat } from \"./timeUtils\";\nimport TimeInput from \"./TimeInput\";\nimport AmPmSwitcher from \"./AmPmSwitcher\";\nimport { useLatest } from \"../utils\";\n\nfunction TimeInputs(_ref) {\n  var hours = _ref.hours,\n      minutes = _ref.minutes,\n      onFocusInput = _ref.onFocusInput,\n      focused = _ref.focused,\n      inputType = _ref.inputType,\n      onChange = _ref.onChange,\n      is24Hour = _ref.is24Hour;\n  var startInput = React.useRef(null);\n  var endInput = React.useRef(null);\n  var dimensions = useWindowDimensions();\n  var isLandscape = dimensions.width > dimensions.height;\n  var theme = useTheme();\n  var onSubmitStartInput = React.useCallback(function () {\n    if (endInput.current) {\n      endInput.current.focus();\n    }\n  }, [endInput]);\n  var onSubmitEndInput = React.useCallback(function () {}, []);\n  var minutesRef = useLatest(minutes);\n  var onChangeHours = React.useCallback(function (newHours) {\n    onChange({\n      hours: newHours,\n      minutes: minutesRef.current,\n      focused: clockTypes.hours\n    });\n  }, [onChange, minutesRef]);\n  return React.createElement(View, {\n    style: [styles.inputContainer, isLandscape && styles.inputContainerLandscape]\n  }, React.createElement(TimeInput, {\n    ref: startInput,\n    placeholder: '00',\n    value: toHourInputFormat(hours, is24Hour),\n    clockType: clockTypes.hours,\n    pressed: focused === clockTypes.hours,\n    onPress: onFocusInput,\n    inputType: inputType,\n    returnKeyType: 'next',\n    onSubmitEditing: onSubmitStartInput,\n    blurOnSubmit: false,\n    onChanged: function onChanged(newHoursFromInput) {\n      var newHours = toHourOutputFormat(newHoursFromInput, hours, is24Hour);\n\n      if (newHoursFromInput > 24) {\n        newHours = 24;\n      }\n\n      onChange({\n        hours: newHours,\n        minutes: minutes\n      });\n    }\n  }), React.createElement(View, {\n    style: styles.hoursAndMinutesSeparator\n  }, React.createElement(View, {\n    style: styles.spaceDot\n  }), React.createElement(View, {\n    style: [styles.dot, {\n      backgroundColor: theme.colors.text\n    }]\n  }), React.createElement(View, {\n    style: styles.betweenDot\n  }), React.createElement(View, {\n    style: [styles.dot, {\n      backgroundColor: theme.colors.text\n    }]\n  }), React.createElement(View, {\n    style: styles.spaceDot\n  })), React.createElement(TimeInput, {\n    ref: endInput,\n    placeholder: '00',\n    value: minutes,\n    clockType: clockTypes.minutes,\n    pressed: focused === clockTypes.minutes,\n    onPress: onFocusInput,\n    inputType: inputType,\n    onSubmitEditing: onSubmitEndInput,\n    onChanged: function onChanged(newMinutesFromInput) {\n      var newMinutes = newMinutesFromInput;\n\n      if (newMinutesFromInput > 60) {\n        newMinutes = 60;\n      }\n\n      onChange({\n        hours: hours,\n        minutes: newMinutes\n      });\n    }\n  }), !is24Hour && React.createElement(React.Fragment, null, React.createElement(View, {\n    style: styles.spaceBetweenInputsAndSwitcher\n  }), React.createElement(AmPmSwitcher, {\n    hours: hours,\n    onChange: onChangeHours\n  })));\n}\n\nvar styles = StyleSheet.create({\n  spaceBetweenInputsAndSwitcher: {\n    width: 12\n  },\n  inputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  inputContainerLandscape: {\n    flex: 1\n  },\n  hoursAndMinutesSeparator: {\n    fontSize: 65,\n    width: 24,\n    alignItems: 'center'\n  },\n  spaceDot: {\n    flex: 1\n  },\n  dot: {\n    width: 7,\n    height: 7,\n    borderRadius: 7 / 2\n  },\n  betweenDot: {\n    height: 12\n  }\n});\nexport default React.memo(TimeInputs);","map":{"version":3,"sources":["TimeInputs.tsx"],"names":["is24Hour","startInput","React","endInput","dimensions","useWindowDimensions","isLandscape","theme","useTheme","onSubmitStartInput","onSubmitEndInput","minutesRef","useLatest","onChangeHours","newHours","onChange","hours","minutes","focused","clockTypes","styles","toHourInputFormat","newHoursFromInput","toHourOutputFormat","hoursAndMinutesSeparator","spaceDot","backgroundColor","text","betweenDot","newMinutesFromInput","newMinutes","spaceBetweenInputsAndSwitcher","width","inputContainer","flexDirection","alignItems","inputContainerLandscape","flex","fontSize","dot","height","borderRadius"],"mappings":"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","sourcesContent":["// @typescript-eslint/no-unused-vars\n// WORK IN PROGRESS\n\nimport * as React from 'react'\nimport {\n  View,\n  StyleSheet,\n  useWindowDimensions,\n  TextInput as TextInputNative,\n} from 'react-native'\nimport { useTheme } from 'react-native-paper'\n\nimport {\n  clockTypes,\n  PossibleClockTypes,\n  PossibleInputTypes,\n  toHourInputFormat,\n  toHourOutputFormat,\n} from './timeUtils'\nimport TimeInput from './TimeInput'\nimport AmPmSwitcher from './AmPmSwitcher'\nimport { useLatest } from '../utils'\n\nfunction TimeInputs({\n  hours,\n  minutes,\n  onFocusInput,\n  focused,\n  inputType,\n  onChange,\n  is24Hour,\n}: {\n  inputType: PossibleInputTypes\n  focused: PossibleClockTypes\n  hours: number\n  minutes: number\n  onFocusInput: (type: PossibleClockTypes) => any\n  onChange: (hoursMinutesAndFocused: {\n    hours: number\n    minutes: number\n    focused?: undefined | PossibleClockTypes\n  }) => any\n  is24Hour: boolean\n}) {\n  const startInput = React.useRef<TextInputNative | null>(null)\n  const endInput = React.useRef<TextInputNative | null>(null)\n  const dimensions = useWindowDimensions()\n  const isLandscape = dimensions.width > dimensions.height\n  const theme = useTheme()\n\n  const onSubmitStartInput = React.useCallback(() => {\n    if (endInput.current) {\n      endInput.current.focus()\n    }\n  }, [endInput])\n\n  const onSubmitEndInput = React.useCallback(() => {\n    // TODO: close modal and persist time\n  }, [])\n\n  const minutesRef = useLatest(minutes)\n  const onChangeHours = React.useCallback(\n    (newHours: number) => {\n      onChange({\n        hours: newHours,\n        minutes: minutesRef.current,\n        focused: clockTypes.hours,\n      })\n    },\n    [onChange, minutesRef]\n  )\n\n  return (\n    <View\n      style={[\n        styles.inputContainer,\n        isLandscape && styles.inputContainerLandscape,\n      ]}\n    >\n      <TimeInput\n        ref={startInput}\n        placeholder={'00'}\n        value={toHourInputFormat(hours, is24Hour)}\n        clockType={clockTypes.hours}\n        pressed={focused === clockTypes.hours}\n        onPress={onFocusInput}\n        inputType={inputType}\n        returnKeyType={'next'}\n        onSubmitEditing={onSubmitStartInput}\n        blurOnSubmit={false}\n        onChanged={(newHoursFromInput) => {\n          let newHours = toHourOutputFormat(newHoursFromInput, hours, is24Hour)\n          if (newHoursFromInput > 24) {\n            newHours = 24\n          }\n          onChange({\n            hours: newHours,\n            minutes,\n          })\n        }}\n        // onChangeText={onChangeStartInput}\n      />\n      <View style={styles.hoursAndMinutesSeparator}>\n        <View style={styles.spaceDot} />\n        <View style={[styles.dot, { backgroundColor: theme.colors.text }]} />\n        <View style={styles.betweenDot} />\n        <View style={[styles.dot, { backgroundColor: theme.colors.text }]} />\n        <View style={styles.spaceDot} />\n      </View>\n      <TimeInput\n        ref={endInput}\n        placeholder={'00'}\n        value={minutes}\n        clockType={clockTypes.minutes}\n        pressed={focused === clockTypes.minutes}\n        onPress={onFocusInput}\n        inputType={inputType}\n        onSubmitEditing={onSubmitEndInput}\n        onChanged={(newMinutesFromInput) => {\n          let newMinutes = newMinutesFromInput\n          if (newMinutesFromInput > 60) {\n            newMinutes = 60\n          }\n          onChange({\n            hours,\n            minutes: newMinutes,\n          })\n        }}\n      />\n      {!is24Hour && (\n        <>\n          <View style={styles.spaceBetweenInputsAndSwitcher} />\n          <AmPmSwitcher hours={hours} onChange={onChangeHours} />\n        </>\n      )}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  spaceBetweenInputsAndSwitcher: { width: 12 },\n  inputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  inputContainerLandscape: {\n    flex: 1,\n  },\n  hoursAndMinutesSeparator: {\n    fontSize: 65,\n    width: 24,\n    alignItems: 'center',\n  },\n  spaceDot: {\n    flex: 1,\n  },\n  dot: {\n    width: 7,\n    height: 7,\n    borderRadius: 7 / 2,\n  },\n  betweenDot: {\n    height: 12,\n  },\n})\n\nexport default React.memo(TimeInputs)\n"]},"metadata":{},"sourceType":"module"}