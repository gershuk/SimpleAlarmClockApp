{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nexport default function AutoSizer(_ref) {\n  var children = _ref.children;\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      layout = _React$useState2[0],\n      setLayout = _React$useState2[1];\n\n  var onLayout = React.useCallback(function (event) {\n    var nl = event.nativeEvent.layout;\n\n    if (!layout || layout.width !== nl.width || layout.height !== nl.height) {\n      setLayout({\n        width: nl.width,\n        height: nl.height\n      });\n    }\n  }, [layout, setLayout]);\n  return React.createElement(View, {\n    style: [styles.autoSizer, layout && layout],\n    onLayout: onLayout\n  }, layout ? children(layout) : null);\n}\nvar styles = StyleSheet.create({\n  autoSizer: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["AutoSizer.tsx"],"names":["children","React","onLayout","event","nl","layout","setLayout","width","height","styles","autoSizer","flex","overflow"],"mappings":";AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAQA,eAAe,SAAA,SAAA,CAAA,IAAA,EAIZ;AAJ+B,MAChCA,QADgC,GAI/B,IAJ+B,CAChCA,QADgC;;AAKhC,wBAA4BC,KAAK,CAALA,QAAAA,CAA5B,IAA4BA,CAA5B;AAAA;AAAA,MAAM,MAAN;AAAA,MAAM,SAAN;;AACA,MAAMC,QAAQ,GAAG,KAAK,CAAL,WAAA,CACdC,UAAAA,KAAD,EAA8B;AAC5B,QAAMC,EAAE,GAAGD,KAAK,CAALA,WAAAA,CADiB,MAC5B;;AAGA,QAAI,CAAA,MAAA,IAAWE,MAAM,CAANA,KAAAA,KAAiBD,EAAE,CAA9B,KAAA,IAAwCC,MAAM,CAANA,MAAAA,KAAkBD,EAAE,CAAhE,MAAA,EAAyE;AACvEE,MAAAA,SAAS,CAAC;AAAEC,QAAAA,KAAK,EAAEH,EAAE,CAAX,KAAA;AAAmBI,QAAAA,MAAM,EAAEJ,EAAE,CAACI;AAA9B,OAAD,CAATF;AACD;AAPY,GAAA,EASf,CAAA,MAAA,EATF,SASE,CATe,CAAjB;AAWA,SACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,KAAK,EAAE,CAACG,MAAM,CAAP,SAAA,EAAmBJ,MAAM,IAAtC,MAAa,CAAb;AAAmD,IAAA,QAAQ,EAAEH;AAA7D,GAAA,EACGG,MAAM,GAAGL,QAAQ,CAAX,MAAW,CAAX,GAFX,IACE,CADF;AAKD;AAED,IAAMS,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EADK,CAAA;AAETC,IAAAA,QAAQ,EAAE;AAFD;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react'\nimport { LayoutChangeEvent, StyleSheet, View } from 'react-native'\n\ntype WidthAndHeight = {\n  width: number\n  height: number\n}\n\nexport default function AutoSizer({\n  children,\n}: {\n  children: ({ width, height }: WidthAndHeight) => any\n}) {\n  const [layout, setLayout] = React.useState<WidthAndHeight | null>(null)\n  const onLayout = React.useCallback(\n    (event: LayoutChangeEvent) => {\n      const nl = event.nativeEvent.layout\n\n      // https://github.com/necolas/react-native-web/issues/1704\n      if (!layout || layout.width !== nl.width || layout.height !== nl.height) {\n        setLayout({ width: nl.width, height: nl.height })\n      }\n    },\n    [layout, setLayout]\n  )\n  return (\n    <View style={[styles.autoSizer, layout && layout]} onLayout={onLayout}>\n      {layout ? children(layout) : null}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  autoSizer: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n})\n"]},"metadata":{},"sourceType":"module"}